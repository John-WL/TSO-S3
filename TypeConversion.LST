C51 COMPILER V9.53.0.0   TYPECONVERSION                                                    12/09/2019 16:32:03 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE TYPECONVERSION
OBJECT MODULE PLACED IN TypeConversion.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE TypeConversion.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(
                    -2)

line level    source

   1          /*****************************Type conversion handling*******************************/
   2          /*
   3              Nom du fichier: TypeConversion.c
   4              Auteur : John-William Lebel
   5          
   6              Date de création: 2019-11-29
   7          
   8              Fonction(s) utile(s) pour convertir certains types en d'autres
   9          
  10          
  11          *****************************************************************************************/
  12          
  13          //-------------- header files  -----------------
  14          #include "_DS89C450Modifie.h"       // Définition des bits et des registres du microcontrôleur
  15          #include "_DeclarationGenerale.h"
  16          #include "TypeConversion.h"
  17          
  18          // Prédéclarations privées
  19          
  20          //**************************************************************
  21          unsigned char ucHalfCharToHexaDecimal(unsigned char ucNumberToEvaluate);
  22          /*  Auteur: John-William Lebel
  23              
  24              Behaviour:  transforme une valeur unsigned char de 4 bits enn valeur ascii hexadécimale
  25              Parameters: unsigned char ucNumberToEvaluate
  26              Return:     unsigned char
  27          ***************************************************************/
  28          
  29          
  30          // *************************************************************************************************
  31          unsigned char ucUnsignedCharToAsciiHexaDecimal(unsigned char* ucpNumberToEvaluate, unsigned char ucDigitIn
             -dex)
  32          //
  33          //  Auteur: John-William Lebel
  34          //
  35          //  Description: Convert an unsigned char variable into an ascii encoded hexadecimal value. If digitIndex 
             -== 0,
  36          //                then the msb is returned (4 bits). If digitIndex == 1, then the lsb is returned (4 bits too).
  37          //                If digitIndex == anything else, then the character ' ' is returned.
  38          //  Paramètres d'entrées  : numberToEvaluate, digitIndex
  39          //  Paramètres de sortie  : an ascii encoded hexadecimal value
  40          //  Notes                 : Aucune
  41          //
  42          // *************************************************************************************************
  43          {
  44   1          unsigned char ucResult;
  45   1        
  46   1          if(ucDigitIndex == 0)   // need to change the 0 for the "define", and include the right file
  47   1          {
  48   2              ucResult = *ucpNumberToEvaluate >> 4;
  49   2          }
  50   1          else if(ucDigitIndex == 1)
  51   1          {
  52   2              ucResult = (*ucpNumberToEvaluate) & 0x0F;
C51 COMPILER V9.53.0.0   TYPECONVERSION                                                    12/09/2019 16:32:03 PAGE 2   

  53   2          }
  54   1          else
  55   1          {
  56   2              ucResult = ' ';
  57   2          }
  58   1          ucResult = ucHalfCharToHexaDecimal(ucResult);
  59   1          
  60   1          return ucResult;
  61   1      }
  62          
  63          // *************************************************************************************************
  64          unsigned char ucUnsignedCharToAsciiDecimal(unsigned char* ucpNumberToEvaluate, unsigned char ucDigitIndex)
  65          //
  66          //  Auteur: John-William Lebel
  67          //
  68          //  Description: Convert an unsigned char variable into an ascii encoded decimal value. If digitIndex == 0
             -,
  69          //                then the 1st digit is returned. If digitIndex == 1, then the 2nd digit is returned.
  70          //                If digitIndex == 2, the 3rd digit is returned. If digitIndex == anything else, then
  71          //                the character ' ' is returned.
  72          //  Paramètres d'entrées  : numberToEvaluate, digitIndex
  73          //  Paramètres de sortie  : an ascii encoded decimal value
  74          //  Notes                 : Aucune
  75          //
  76          // *************************************************************************************************
  77          {
  78   1          unsigned char ucResult;
  79   1        
  80   1          if(ucDigitIndex == 0)
  81   1          {
  82   2              ucResult = '0' + (*ucpNumberToEvaluate / 100);
  83   2          }
  84   1          else if(ucDigitIndex == 1)
  85   1          {
  86   2              ucResult = '0' + (*ucpNumberToEvaluate / 10);
  87   2          }
  88   1          else if(ucDigitIndex == 2)
  89   1          {
  90   2              ucResult = '0' + (*ucpNumberToEvaluate % 10);
  91   2          }
  92   1          else
  93   1          {
  94   2              ucResult = ' ';
  95   2          }
  96   1          
  97   1          return ucResult;
  98   1      }
  99          
 100          // *************************************************************************************************
 101          unsigned char* ucpWeightTypeToString(unsigned char* ucpWeightTypeIndex)
 102          //
 103          //  Auteur: John-William Lebel
 104          //
 105          //  Description: Convert an unsigned char variable that represents the type of weight (wheither it's red,
 106          //                green, or blue), which can be seen as an index, into its corresponding name in the string format
 107          //  Paramètres d'entrées  : weightTypeIndex
 108          //  Paramètres de sortie  : the name of the weight type
 109          //  Notes                 : Aucune
 110          //
 111          // *************************************************************************************************
 112          {
 113   1          unsigned char* ucpResult;
C51 COMPILER V9.53.0.0   TYPECONVERSION                                                    12/09/2019 16:32:03 PAGE 3   

 114   1          
 115   1          if(*ucpWeightTypeIndex == BLUE_WEIGHT)
 116   1          {
 117   2              ucpResult = "Bleu ";
 118   2          }
 119   1          else if(*ucpWeightTypeIndex == GREEN_WEIGHT)
 120   1          {
 121   2              ucpResult = "Vert ";
 122   2          }
 123   1          else if(*ucpWeightTypeIndex == RED_WEIGHT)
 124   1          {
 125   2              ucpResult = "Rouge";
 126   2          }
 127   1          else
 128   1          {
 129   2              ucpResult = "Aucun";
 130   2          }
 131   1          
 132   1          return ucpResult;
 133   1      }
 134          
 135          // *************************************************************************************************
 136          unsigned char ucHalfCharToHexaDecimal(unsigned char ucNumberToEvaluate)
 137          //
 138          //  Auteur: John-William Lebel
 139          //
 140          //  Description: Convert an unsigned char variable smaller than 0x10 into an hexadecimal value in ascii.
 141          //  Paramètres d'entrées  : numberToEvaluate
 142          //  Paramètres de sortie  : an ascii encoded hexadecimal value
 143          //  Notes                 : Aucune
 144          //
 145          // *************************************************************************************************
 146          {
 147   1          if(ucNumberToEvaluate <= 9)
 148   1          {
 149   2              ucNumberToEvaluate = '0' + ucNumberToEvaluate;
 150   2          }
 151   1          else if(ucNumberToEvaluate <= 0x0F)
 152   1          {
 153   2              ucNumberToEvaluate = 'A' + (ucNumberToEvaluate - 0x0A);
 154   2          }
 155   1          else
 156   1          {
 157   2              ucNumberToEvaluate = ' ';
 158   2          }
 159   1          
 160   1          return ucNumberToEvaluate;
 161   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    196    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
