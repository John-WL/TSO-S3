C51 COMPILER V9.53.0.0   KEYBOARDI2C                                                       12/09/2019 16:32:03 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE KEYBOARDI2C
OBJECT MODULE PLACED IN KeyboardI2C.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE KeyboardI2C.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*****************************Timer0 handling*******************************/
   2          /*
   3              Nom du fichier: Keyboard.c
   4              Auteur : John-William Lebel
   5          
   6              Date de création: 2019-12-02
   7          
   8              Fonction(s) nécessaire(s) pour intercepter et gérer les touches du clavier I2C
   9          
  10          
  11          *****************************************************************************************/
  12          #include "_DS89C450Modifie.h"       // Définition des bits et des registres du microcontrôleur
  13          #include "_DeclarationGenerale.h"
  14          #include "ProjectDefinitions.h"
  15          #include "KeyboardI2C.h"
  16          #include "I2C.h"
  17          #include "SequenceHandler.h"
  18          
  19          // Prototypes privés
  20          
  21          //**************************************************************
  22          void vManualIncrementMotor(struct STKeyboardManualSettings* stpKeyboardManualSettings,
  23              struct STArmState* stpCurrentArmState,
  24              char cDirection);
  25          /*  Auteur: John-William Lebel
  26              
  27              Behaviour:  incrémente le moteur sélectionné à l'aide du calvier de la
  28                          quantitée sélectionnée avec le clavier
  29                          
  30              Parameters: struct STKeyboardManualSettings* stpKeyboardManualSettings,
  31                          struct STArmState* stpCurrentArmState,
  32                          char cDirection
  33              Return:     void
  34          ***************************************************************/
  35          
  36          //**************************************************************
  37          void vHandleMotorValueOverflow(unsigned char* ucpMotorValue, char* cpDirection);
  38          /*  Auteur: John-William Lebel
  39              
  40              Behaviour:  empêche la valeur manuelle des moteurs de dépasser 205 ou d'aller en dessous de 0
  41                          
  42              Parameters: unsigned char* ucpMotorValue, char* cpDirection
  43              Return:     void
  44          ***************************************************************/
  45          
  46          unsigned char ucKeyboardCharacters[16] = {'1', '2', '3', 'A',
  47                                                    '4', '5', '6', 'B',
  48                                                    '7', '8', '9', 'C',
  49                                                    '*', '0', '#', 'D'};
  50          
  51          
  52          // Implémentation fonctions
  53          unsigned char* ucpReadKeyboardI2C()
  54          {
  55   1          unsigned char ucKey = ' ';
C51 COMPILER V9.53.0.0   KEYBOARDI2C                                                       12/09/2019 16:32:03 PAGE 2   

  56   1          unsigned char ucAckValue = 0;
  57   1          
  58   1          if(!P1_2)
  59   1          {
  60   2              vStartBitI2C();
  61   2              ucAckValue = ucEcrire8BitsI2C(KEYBOARD_ADDRESS_I2C + 1);
  62   2              if(ucAckValue)
  63   2              {
  64   3                  return &ucKey; // return space if noAcks were detected
  65   3              }
  66   2              ucKey = ucLire8BitsI2C(0xFF);  // read with noAck
  67   2              vStopBitI2C();
  68   2              
  69   2              ucKey = ucKeyboardCharacters[ucKey % 16];
  70   2          }
  71   1          
  72   1          return &ucKey;
  73   1      }
  74          
  75          void vHandleKey(unsigned char* ucpKey,
  76              struct STKeyboardManualSettings* stpKeyboardManualSettings,
  77              struct STArmState* stpCurrentArmState,
  78              struct STSequenceStep* stpCurrentSequenceIndexes)
  79          {
  80   1          switch(*ucpKey)
  81   1          {
  82   2              case '1':
  83   2                  stpKeyboardManualSettings->ucManualySelectedMotor = MOTOR_0;
  84   2                  break;
  85   2              case '2':
  86   2                  stpKeyboardManualSettings->ucManualySelectedMotor = MOTOR_1;
  87   2                  break;
  88   2              case '3':
  89   2                  stpKeyboardManualSettings->ucManualySelectedMotor = MOTOR_2;
  90   2                  break;
  91   2              case '4':
  92   2                  stpKeyboardManualSettings->ucManualySelectedMotor = MOTOR_3;
  93   2                  break;
  94   2              case '5':
  95   2                  stpKeyboardManualSettings->ucManualySelectedMotor = MOTOR_4;
  96   2                  break;
  97   2              case '0':
  98   2                  stpKeyboardManualSettings->ucManualMovingSpeed = (stpKeyboardManualSettings->ucManualMovingSpe
             -ed + 4) % 20;
  99   2                  break;
 100   2              
 101   2              case '*':
 102   2                  vManualIncrementMotor(stpKeyboardManualSettings, stpCurrentArmState, -1);
 103   2                  break;
 104   2              case '#':
 105   2                  vManualIncrementMotor(stpKeyboardManualSettings, stpCurrentArmState, 1);
 106   2                  break;
 107   2              
 108   2              case 'A':
 109   2                  vSetOperatingState(WARM_UP_SETUP_OPERATING_STATE);
 110   2                  break;
 111   2              case 'B':
 112   2                  stpCurrentArmState->ucBase = 0x10;
 113   2                  stpCurrentArmState->ucShoulder = 0x4C;
 114   2                  stpCurrentArmState->ucElbow = 0x00;
 115   2                  stpCurrentArmState->ucWrist = 0x55;
 116   2                  stpCurrentArmState->ucGrip = 0x00;
C51 COMPILER V9.53.0.0   KEYBOARDI2C                                                       12/09/2019 16:32:03 PAGE 3   

 117   2                  break;
 118   2              
 119   2              case 'C':
 120   2                  stpCurrentSequenceIndexes->ucSequence = (stpCurrentSequenceIndexes->ucSequence + 1) % 7;
 121   2                  stpCurrentSequenceIndexes->ucStep = 0;
 122   2                  break;
 123   2              case 'D':
 124   2                  stpCurrentSequenceIndexes->ucStep = (stpCurrentSequenceIndexes->ucStep + 1) % 10;
 125   2                  break;
 126   2                  
 127   2          }
 128   1      }
 129          
 130          void vManualIncrementMotor(struct STKeyboardManualSettings* stpKeyboardManualSettings, struct STArmState* 
             -stpCurrentArmState, char cDirection)
 131          {
 132   1          switch(stpKeyboardManualSettings->ucManualySelectedMotor)
 133   1          {
 134   2              case MOTOR_0:
 135   2                  stpCurrentArmState->ucBase += (char)(((int)stpKeyboardManualSettings->ucManualMovingSpeed) * c
             -Direction);
 136   2                  vHandleMotorValueOverflow(&(stpCurrentArmState->ucBase), &cDirection);
 137   2                  break;
 138   2              case MOTOR_1:
 139   2                  stpCurrentArmState->ucShoulder += (char)(((int)stpKeyboardManualSettings->ucManualMovingSpeed)
             - * cDirection);
 140   2                  vHandleMotorValueOverflow(&(stpCurrentArmState->ucShoulder), &cDirection);
 141   2                  break;
 142   2              case MOTOR_2:
 143   2                  stpCurrentArmState->ucElbow += (char)(((int)stpKeyboardManualSettings->ucManualMovingSpeed) * 
             -cDirection);
 144   2                  vHandleMotorValueOverflow(&(stpCurrentArmState->ucElbow), &cDirection);
 145   2                  break;
 146   2              case MOTOR_3:
 147   2                  stpCurrentArmState->ucWrist += (char)(((int)stpKeyboardManualSettings->ucManualMovingSpeed) * 
             -cDirection);
 148   2                  vHandleMotorValueOverflow(&(stpCurrentArmState->ucWrist), &cDirection);
 149   2                  break;
 150   2              case MOTOR_4:
 151   2                  stpCurrentArmState->ucGrip += (char)(((int)stpKeyboardManualSettings->ucManualMovingSpeed) * c
             -Direction);
 152   2                  vHandleMotorValueOverflow(&(stpCurrentArmState->ucGrip), &cDirection);
 153   2                  break;
 154   2          }
 155   1      }
 156          
 157          void vHandleMotorValueOverflow(unsigned char* ucpMotorValue, char* cpDirection)
 158          {
 159   1          if(*cpDirection == 1 && *ucpMotorValue > 205)
 160   1          {
 161   2              *ucpMotorValue = 205;
 162   2          }
 163   1          else if(*cpDirection == -1 && *ucpMotorValue > 205)
 164   1          {
 165   2              *ucpMotorValue = 0;
 166   2          }
 167   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    892    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.53.0.0   KEYBOARDI2C                                                       12/09/2019 16:32:03 PAGE 4   

   XDATA SIZE       =     16      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
