C51 COMPILER V9.53.0.0   I2C                                                               12/04/2019 19:28:18 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN I2C.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE I2C.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /**************************************************************************************************
   2          Nom du fichier : I2C.c
   3          Auteur : Stéphane Deschênes                  
   4          Date de création : 01-09-2019
   5          Version 1.0
   6             
   7            Contient les fonctions I2C
   8                
   9          ***************************************************************************************************/
  10          
  11          // *************************************************************************************************
  12          //  INCLUDES
  13          // *************************************************************************************************  
  14          #include "ds89c450.h"       // Définition des bits et des registres du microcontrôleur
  15          #include "I2C.h"
  16          #include <stdio.h>          // Prototype de declarations des fonctions I/O
  17          
  18          
  19          // *************************************************************************************************
  20          //  CONSTANTES
  21          // *************************************************************************************************
  22          
  23          /* VIDE */
  24          
  25          // *************************************************************************************************
  26          //  FONCTIONS LOCALES
  27          // *************************************************************************************************
  28          void vI2CDelai(unsigned int tmp);
  29          void vEcrire1BitI2C(unsigned char ucBitOut);
  30          unsigned char ucLire1BitI2C(void);
  31          
  32          
  33          // *************************************************************************************************
  34          //  STRUCTURES ET UNIONS
  35          // *************************************************************************************************
  36          /* VIDE */
  37          
  38          // *************************************************************************************************
  39          // VARIABLES GLOBALES
  40          // *************************************************************************************************
  41          /* VIDE */
  42          
  43          // *************************************************************************************************
  44          // VARIABLES LOCALES
  45          // *************************************************************************************************
  46          /* VIDE */
  47          
  48          
  49          
  50          //********************************vDelaiI2C*****************************
  51          //  Nom de la fonction : vDelaiI2C
  52          //  Auteur : Alain Champagne    
  53          //       Date de création : 30-05-2007              
  54          //  Description :   Routine de délai pour la communication I2C. 
  55          //              
C51 COMPILER V9.53.0.0   I2C                                                               12/04/2019 19:28:18 PAGE 2   

  56          //  Fonctions appelées :  Aucune    
  57          //  Paramètres d'entrée :   Aucun   
  58          //  Paramètres de sortie :  Aucun   
  59          //  Variables utilisées :   Aucune
  60          //  Equate :    Aucun 
  61          //  #Define :     Aucun 
  62          //            
  63          //**********************************************************************
  64          void vI2CDelai (unsigned int tmp)
  65          {   
  66   1        while (tmp>0)
  67   1        {
  68   2          tmp--;
  69   2        }   
  70   1      }
  71          
  72          
  73          //*********************************************************************
  74          void vI2CStartBit(void)     
  75          //  Auteur : Alain Champagne    
  76          //  Date de création : 30-05-2007             
  77          //  Description :   Fonction qui effectue un start bit avec les lignes SDA et SCL 
  78          //    
  79          //  Paramètres d'entrée :   Aucun   
  80          //  Paramètres de sortie :  Aucun   
  81          //  Notes: Passage de 1 à 0 de la ligne SDA durant un niveau haut de SCL
  82          //**********************************************************************
  83          {
  84   1        SDA = 1;
  85   1        SCL = 1;
  86   1        vI2CDelai (dDelai);
  87   1        SDA = 0;
  88   1        vI2CDelai (dDelai);
  89   1        SCL = 0;
  90   1        vI2CDelai(dDelai);
  91   1      }
  92          
  93          
  94          //**********************************************************************
  95          void vI2CStopBit(void)
  96          //  Auteur : Alain Champagne    
  97          //       Date de création : 30-05-2007              
  98          //  Description :   Routine de clôture d'une communication série
  99          //      I2C. Doit être appelée à la fin de toutes 
 100          //      opérations.
 101          //
 102          //  Paramètres d'entrée :   Aucun   
 103          //  Paramètres de sortie :  Aucun   
 104          //  Variables utilisées :   Aucune
 105          //            
 106          //**********************************************************************
 107          {
 108   1        //Passage de 0 à 1 sur la ligne SDA durant
 109   1        //un niveau 1 sur la ligne SCL initie un 
 110   1        //STOP BIT.
 111   1        SDA = 0;            // Donnée à zéro et
 112   1        SCL = 0;            // clock aussi.
 113   1        vI2CDelai (dDelai); // Légère attente.
 114   1        SCL = 1;            // SCL à 1.
 115   1        vI2CDelai (dDelai); // Légère attente.
 116   1        SDA = 1;            // SDA à 1.
 117   1        vI2CDelai (dDelai); // Légère attente.  
C51 COMPILER V9.53.0.0   I2C                                                               12/04/2019 19:28:18 PAGE 3   

 118   1      }
 119          
 120          
 121          
 122          //**********************************************************************
 123          void vEcrire1BitI2C(unsigned char ucBitOut)
 124          //  Auteur : Alain Champagne    
 125          //      Date de création : 30-05-2007             
 126          //  Description :   Routine d'émission d'un bit de communication 
 127          //      I2C.  La routine prend le bit de la variable
 128          //      vBitOut et ajuste la ligne SDA en fonction de cette 
 129          //       variable. Les lignes SDA et SCL sont activée à tour
 130          //       de rôle pour communiquer l'information 
 131          //       du maître à l'esclave.
 132          //              
 133          //  Fonctions appelées :  Aucune    
 134          //  Paramètres d'entrée :   La valeur du bit à envoyer    
 135          //  Paramètres de sortie :  Aucun   
 136          //  Variables utilisées :   ucBitVar
 137          //  Equate :    Aucun 
 138          //  #Define :     SDA, SCL  
 139          //            
 140          //**********************************************************************
 141          {
 142   1        SCL = 0;
 143   1        // On assume le bit à 0.
 144   1        if (ucBitOut == 0xFF) // Vérifier et ajuster l'état du bit à sortir.
 145   1          SDA = 1;
 146   1        else
 147   1          SDA = 0;  
 148   1        vI2CDelai(dDelai);  // Légère attente.
 149   1        SCL = 1;            // Aller activer la ligne SCL.
 150   1        vI2CDelai(dDelai);  // Légère attente.
 151   1        SCL = 0;            // On replace la ligne SCL à 0.
 152   1        vI2CDelai(dDelai);  // Légère attente.
 153   1      }
 154          
 155          
 156          
 157          
 158          //**********************************************************************
 159          unsigned char ucLire1BitI2C(void)
 160          //  Auteur : Alain Champagne    
 161          //      Date de création : 30-05-2006             
 162          //  Description :   Routine de réception d'un bit de communication 
 163          //      I2C.  La routine prend le bit de la ligne SDA
 164          //      après avoir activé la ligne SCL. Le bit de 
 165          //      donnée est placé temporairement dans une va-
 166          //      riable ucBitIn et sera réutilisé dans 
 167          //      une routine de traitement d'octets.
 168          //              
 169          //  Fonctions appelées :    Aucune    
 170          //  Paramètres d'entrée :   Aucun   
 171          //  Paramètres de sortie :  Retourne la valeur du bit lu  
 172          //
 173          //**********************************************************************
 174          {
 175   1        unsigned char ucBitIn;
 176   1        
 177   1        ucBitIn = 0xFF;       // On assume le bit à lire à 1.
 178   1        SDA = 1;              // La ligne SDA est en entrée.
 179   1        vI2CDelai(dDelai);    // Légère attente.
C51 COMPILER V9.53.0.0   I2C                                                               12/04/2019 19:28:18 PAGE 4   

 180   1        SCL = 1;              // On lève la ligne SCL.
 181   1        vI2CDelai(dDelai);    // Légère attente.
 182   1        if (!SDA)             // Vérifier et ajuster le bit de donnée.
 183   1          ucBitIn = 0x00;
 184   1        SCL = 0;              // On replace la ligne SCL à 0.
 185   1        vI2CDelai(dDelai);    // Légère attente.
 186   1        
 187   1        return (ucBitIn);     // Retourner l'état du bit.
 188   1      }
 189          
 190          
 191          
 192          // *************************************************************************************************
 193          unsigned char ucEcrire8BitsI2C (unsigned char ucTxData)
 194          //  Auteur: Alain Champagne 
 195          //  Date de création :  30-05-2007
 196          //  
 197          //  Modification:   Ajout du ACK.
 198          //  30-07-2019  Ajout du retour du ACK
 199          //
 200          //  Description: Routine de réception de 8 bits de données en I2C.
 201          //  Paramètres d'entrées : Octet que l'on veut envoyer
 202          //  Paramètres de sortie : État du ack venant du slave
 203          //  Notes                : Aucune
 204          //
 205          // *************************************************************************************************
 206          {
 207   1        int i;
 208   1        unsigned char ucI2C, ucI2CBit;
 209   1        
 210   1        for (i=0; i<8; i++)         
 211   1        {
 212   2          ucI2CBit = 0x00;          
 213   2          ucI2C = ucTxData & 0x80;
 214   2          if (ucI2C == 0x80)        
 215   2          {
 216   3            ucI2CBit = 0xFF;        
 217   3          }
 218   2          vEcrire1BitI2C(ucI2CBit); 
 219   2          vI2CDelai(dDelai);        
 220   2          ucTxData = ucTxData << 1; 
 221   2        }  
 222   1        return(ucLire1BitI2C());        
 223   1      }
 224          
 225          
 226          //**********************************************************************
 227          unsigned char ucLire8BitsI2C (unsigned char ucAckValue)
 228          //  Auteur : Alain Champagne    
 229          //      Date de création : 30-05-2001             
 230          //  Description :   Routine de réception de 8 bits de donnée 
 231          //      provenant d'une communication I2C.
 232          //
 233          //  Modification - Stéphane Deschênes   
 234          //  30-07-2019  Ajout de la valeur du ACK en paramètre
 235          //
 236          //  Paramètres d'entrée :   Valeur du ack voulu.    
 237          //  Paramètres de sortie :  ucRxData.   
 238          //  Variables utilisées :   ucI2C, i.
 239          //  Variable globale :      Aucune.
 240          //  Equate :    Aucun 
 241          //  #Define :     Aucun 
C51 COMPILER V9.53.0.0   I2C                                                               12/04/2019 19:28:18 PAGE 5   

 242          //            
 243          //**********************************************************************
 244          {
 245   1        unsigned char ucRxData, ucI2C;
 246   1        int i;
 247   1        ucRxData = 0x00;            // Remise à zéro de la variable d'entrée.
 248   1        for (i=0; i<8; i++)         // Faire 8 fois pour un octet.
 249   1        {
 250   2          ucRxData = ucRxData << 1; // Décaler la donnée reçue.
 251   2          ucI2C = ucLire1BitI2C();  // Appel de la fonction de lecture d'un bit.
 252   2          vI2CDelai(dDelai);        // Légère attente.
 253   2          if (ucI2C==0xFF)          // Traitement et ajustement de la variable.
 254   2          ucRxData = ucRxData | 0x01;  
 255   2        } 
 256   1        vEcrire1BitI2C(ucAckValue);     // Envoyer la valeur du ack à la fin
 257   1        return (ucRxData);          // Retour de la variable.
 258   1      }
 259          
 260          
 261          
 262          unsigned char ucLireMemI2C(unsigned int uiAdr)
 263          {
 264   1        unsigned char ucVal = 0x00;
 265   1        
 266   1        vI2CStartBit();
 267   1        
 268   1        ucEcrire8BitsI2C(0xA0);
 269   1        
 270   1        ucVal = uiAdr >> 8;
 271   1        ucEcrire8BitsI2C(ucVal);
 272   1        
 273   1        ucVal = uiAdr;
 274   1        ucEcrire8BitsI2C(ucVal);
 275   1        
 276   1        vI2CStartBit();
 277   1        
 278   1        ucEcrire8BitsI2C(0xA1);
 279   1        ucVal = ucLire8BitsI2C(1);
 280   1        
 281   1        vI2CStopBit();
 282   1        
 283   1        return ucVal;
 284   1      }
 285          
 286          
 287          
 288          void vEcrireMemI2C(unsigned char ucData, unsigned int uiAdr)
 289          {
 290   1        unsigned char ucVal = 0x00;
 291   1        
 292   1        vI2CStartBit();
 293   1        
 294   1        ucEcrire8BitsI2C(0xA0);
 295   1        
 296   1        ucVal = uiAdr >> 8;
 297   1        ucEcrire8BitsI2C(ucVal);
 298   1        
 299   1        ucVal = uiAdr;
 300   1        ucEcrire8BitsI2C(ucVal);
 301   1        
 302   1        ucEcrire8BitsI2C(ucData);
 303   1        
C51 COMPILER V9.53.0.0   I2C                                                               12/04/2019 19:28:18 PAGE 6   

 304   1        vI2CStopBit();
 305   1        
 306   1        vI2CDelai(4000);
 307   1      }
 308          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    300    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
