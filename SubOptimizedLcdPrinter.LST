C51 COMPILER V9.53.0.0   SUBOPTIMIZEDLCDPRINTER                                            12/02/2019 21:43:57 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SUBOPTIMIZEDLCDPRINTER
OBJECT MODULE PLACED IN SubOptimizedLcdPrinter.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SubOptimizedLcdPrinter.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTE
                    -ND TABS(2)

line level    source

   1          /**************************************************************************************************
   2             Nom du fichier: SubOptimizedLcdPrinter.c
   3             Auteur: John-William Lebel
   4             Date de création: 2019-11-29
   5             
   6             Fichier qui contient les fonctions utiles à l'optimisation partielle du temps d'affichage du LCD
   7             dans le câdre du projet final de 3e session
   8             
   9                          
  10          ***************************************************************************************************/
  11          // headers
  12          #include "LCD.h"
  13          #include "ProjectDefinitions.h"
  14          #include "TypeConversion.h"
  15          
  16          
  17          // implémentations
  18          // *************************************************************************************************
  19          void printLcdDeltaMotors(struct ArmState* currentArmState)
  20          //
  21          //  Auteur: John-William Lebel
  22          //
  23          //  Description: prints at the right place on the LCD the motor values that are sent to the pic
  24          //  Paramètres d'entrées  : currentArmState
  25          //  Paramètres de sortie  : None
  26          //  Notes                 : Aucune
  27          //
  28          // *************************************************************************************************
  29          {
  30   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->base), 0), LCD_LINE0, LCD_MOTOR_0_DIGIT_PO
             -SITION_0);
  31   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->base), 1), LCD_LINE0, LCD_MOTOR_0_DIGIT_PO
             -SITION_1);
  32   1                                                      
  33   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->shoulder), 0), LCD_LINE0, LCD_MOTOR_1_DIGI
             -T_POSITION_0);
  34   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->shoulder), 1), LCD_LINE0, LCD_MOTOR_1_DIGI
             -T_POSITION_1);
  35   1                                                      
  36   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->elbow), 0), LCD_LINE0, LCD_MOTOR_2_DIGIT_P
             -OSITION_0);
  37   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->elbow), 1), LCD_LINE0, LCD_MOTOR_2_DIGIT_P
             -OSITION_1);
  38   1                                                      
  39   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->wrist), 0), LCD_LINE0, LCD_MOTOR_3_DIGIT_P
             -OSITION_0);
  40   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->wrist), 1), LCD_LINE0, LCD_MOTOR_3_DIGIT_P
             -OSITION_1);
  41   1                                                      
  42   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->grip), 0), LCD_LINE1, LCD_MOTOR_4_DIGIT_PO
             -SITION_0);
  43   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(currentArmState->grip), 1), LCD_LINE1, LCD_MOTOR_4_DIGIT_PO
             -SITION_1);
  44   1      }
C51 COMPILER V9.53.0.0   SUBOPTIMIZEDLCDPRINTER                                            12/02/2019 21:43:57 PAGE 2   

  45          
  46          // *************************************************************************************************
  47          void printLcdDeltaTrame(struct TramePIC* trame)
  48          //
  49          //  Auteur: John-William Lebel
  50          //
  51          //  Description: prints at the right place on the LCD the sensor values that the pic sent so we can read t
             -hem
  52          //  Paramètres d'entrées  : sensors
  53          //  Paramètres de sortie  : None
  54          //  Notes                 : Aucune
  55          //
  56          // *************************************************************************************************
  57          {
  58   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(trame->adcSensors.touchScreen.x), 0), LCD_LINE1, LCD_TOUCH_
             -SCREEN_X_DIGIT_POSITION_0);
  59   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(trame->adcSensors.touchScreen.x), 1), LCD_LINE1, LCD_TOUCH_
             -SCREEN_X_DIGIT_POSITION_1);
  60   1                                                      
  61   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(trame->adcSensors.touchScreen.y), 0), LCD_LINE1, LCD_TOUCH_
             -SCREEN_Y_DIGIT_POSITION_0);
  62   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(trame->adcSensors.touchScreen.y), 1), LCD_LINE1, LCD_TOUCH_
             -SCREEN_Y_DIGIT_POSITION_1);
  63   1                                                      
  64   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(trame->adcSensors.gripIntensity), 0), LCD_LINE1, LCD_GRIP_I
             -NTENSITY_DIGIT_POSITION_0);
  65   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(trame->adcSensors.gripIntensity), 1), LCD_LINE1, LCD_GRIP_I
             -NTENSITY_DIGIT_POSITION_1);
  66   1          
  67   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(trame->adcSensors.weightSensor), 0), LCD_LINE2, LCD_WEIGHT_
             -SENSOR_DIGIT_POSITION_0);
  68   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(&(trame->adcSensors.weightSensor), 1), LCD_LINE2, LCD_WEIGHT_
             -SENSOR_DIGIT_POSITION_1);
  69   1      }
  70          
  71          // *************************************************************************************************
  72          void printLcdDeltaWeightType(unsigned char* weightType)
  73          //
  74          //  Auteur: John-William Lebel
  75          //
  76          //  Description: prints at the right place on the LCD the current estimated weight type we're dealing with
  77          //                (wheither it's red, green or blue)
  78          //  Paramètres d'entrées  : weightType
  79          //  Paramètres de sortie  : None
  80          //  Notes                 : Aucune
  81          //
  82          // *************************************************************************************************
  83          {
  84   1          vLcdEcrireCaract(weightTypeToString(weightType)[0], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_0);
  85   1          vLcdEcrireCaract(weightTypeToString(weightType)[1], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_1);
  86   1          vLcdEcrireCaract(weightTypeToString(weightType)[2], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_2);
  87   1          vLcdEcrireCaract(weightTypeToString(weightType)[3], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_3);
  88   1          vLcdEcrireCaract(weightTypeToString(weightType)[4], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_4);
  89   1      }
  90          
  91          // *************************************************************************************************
  92          void printLcdDeltaManualSettings(struct KeyboardManualSettings* keyboardManualSettings)
  93          //
  94          //  Auteur: John-William Lebel
  95          //
  96          //  Description: prints at the right place on the LCD the current setted values for the manual control of 
             -the arm
C51 COMPILER V9.53.0.0   SUBOPTIMIZEDLCDPRINTER                                            12/02/2019 21:43:57 PAGE 3   

  97          //  Paramètres d'entrées  : keyboardManualSettings
  98          //  Paramètres de sortie  : None
  99          //  Notes                 : Aucune
 100          //
 101          // *************************************************************************************************
 102          {
 103   1          vLcdEcrireCaract(unsignedCharToDecimal(&(keyboardManualSettings->manualMovingSpeed), 1), LCD_LINE3, LCD_
             -MANUAL_MOTOR_SPEED_DIGIT_POSITION_0);
 104   1          vLcdEcrireCaract(unsignedCharToDecimal(&(keyboardManualSettings->manualMovingSpeed), 2), LCD_LINE3, LCD_
             -MANUAL_MOTOR_SPEED_DIGIT_POSITION_1);
 105   1      }
 106          
 107          // *************************************************************************************************
 108          void printLcdCurrentSequenceStep(struct SequenceStep* currentSequenceIndexes)
 109          //
 110          //  Auteur: John-William Lebel
 111          //
 112          //  Description: prints at the right place on the LCD the current sequence and step the arm is performing
 113          //  Paramètres d'entrées  : currentSequenceIndexes
 114          //  Paramètres de sortie  : None
 115          //  Notes                 : Aucune
 116          //
 117          // *************************************************************************************************
 118          {
 119   1          vLcdEcrireCaract(currentSequenceIndexes->sequence + '0', LCD_LINE3, LCD_SEQ_DIGIT_POSITION);
 120   1          vLcdEcrireCaract(currentSequenceIndexes->step + '0', LCD_LINE3, LCD_STEP_DIGIT_POSITION);
 121   1      }
 122          
 123          // *************************************************************************************************
 124          void printLcdDeltaConnectionState(unsigned char connectionStateString[])
 125          //
 126          //  Auteur: John-William Lebel
 127          //
 128          //  Description: prints at the right place on the LCD the current connection state, wheither it's OffL or 
             -OnL
 129          //  Paramètres d'entrées  : connectionStateString[]
 130          //  Paramètres de sortie  : None
 131          //  Notes                 : Aucune
 132          //
 133          // *************************************************************************************************
 134          {
 135   1          vLcdEcrireCaract(connectionStateString[0], LCD_LINE3, LCD_CONNECTION_STATE_DIGIT_POSITION_0);
 136   1          vLcdEcrireCaract(connectionStateString[1], LCD_LINE3, LCD_CONNECTION_STATE_DIGIT_POSITION_1);
 137   1          vLcdEcrireCaract(connectionStateString[2], LCD_LINE3, LCD_CONNECTION_STATE_DIGIT_POSITION_2);
 138   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    866    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
