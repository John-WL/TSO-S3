C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/03/2019 18:09:14 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CIRCULARBUFFER_RXTX
OBJECT MODULE PLACED IN CircularBuffer_RxTx.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CircularBuffer_RxTx.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -TABS(2)

line level    source

   1          /*****************************Contrôle Communication Série*******************************/
   2          /* 
   3             Nom du fichier : CircularBuffer_Rx.c
   4             Auteur : Hugo Pellerin
   5          
   6          Date de creation :  02-12-19
   7           
   8          Fonction necessaire pour reception la trame du PIC
   9              
  10              
  11                
  12          *****************************************************************************************/
  13          #include <stdio.h>   
  14          #include "RxTx232.h"
  15          #include "ds89c450.h" 
  16          #include "ProjectDefinitions.h"
  17          #include "CircularBuffer_RxTx.h"
  18          
  19          unsigned char ucRx(void);
  20          unsigned char ucHandleCS(struct ArmState *statePtr);
  21          void ucTx(unsigned char ucTransmi);
  22          
  23          unsigned char ucIndiceIN = 0;
  24          unsigned char ucIndiceOUT = 0;
  25          unsigned char ucIndiceTrame = 0;
  26          unsigned char ucData = 0;
  27          
  28          unsigned char ucCircularBuffer[8];
  29          
  30          
  31          void vInitInterrupt(void)
  32          //
  33          //  Auteur: Hugo Pellerin   
  34          //  Date de création :  19-11-08
  35          //  Version 1.0
  36          //
  37          //  Description: initialise les interruption (general, SERIAL0)
  38          //               
  39          //  Paramètres d'entrées : -
  40          //  Paramètres de sortie : -
  41          //  Notes                : Aucune
  42          //
  43          // *************************************************************************************************
  44          {
  45   1          ES0 = 1;    // Permettre interruption du Serial 0
  46   1          EA = 1;     // Permettre les interruptions générale
  47   1      }
  48          
  49          void InterruptionSerie0 (void) interrupt 4
  50          //
  51          //  Auteur: Hugo Pellerin   
  52          //  Date de création :  19-11-08
  53          //  Version 1.0
  54          //
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/03/2019 18:09:14 PAGE 2   

  55          //  Description: remet les flag du port serie a 0 et call RX
  56          //  Paramètres d'entrées : -
  57          //  Paramètres de sortie : vrai ou faux
  58          //  Notes                : Aucune
  59          //
  60          // *************************************************************************************************
  61          {
  62   1          if(RI_0 == 1)
  63   1          {
  64   2              ucData = ucRx();
  65   2              ucCircularBuffer[ucIndiceIN] = ucData;
  66   2              ucIndiceIN = ((ucIndiceIN + 1) & 0x07);
  67   2              RI_0 = 0;
  68   2          }
  69   1          if(TI_0 == 1)
  70   1          {
  71   2              TI_0 = 0;
  72   2          }
  73   1      }
  74          
  75          unsigned char ucRx()
  76          //
  77          //  Auteur: Hugo Pellerin   
  78          //  Date de création :  19-11-08
  79          //  Version 1.0
  80          //
  81          //  Description: met la valeur de SBUF0 dans une varible et appel des fonction pour l'affichage LCD
  82          //  Paramètres d'entrées : -
  83          //  Paramètres de sortie : -
  84          //  Notes                : Aucune
  85          //
  86          // *************************************************************************************************
  87          {
  88   1          unsigned char ucTemp;
  89   1          ucTemp = SBUF0;
  90   1          return ucTemp;
  91   1      }
  92          
  93          void vCircularBuffer(struct TramePIC *tramePtr)
  94          //
  95          //  Auteur: Hugo Pellerin   
  96          //  Date de création :  19-12-02
  97          //  Version 1.0
  98          //
  99          //  Description: 
 100          //  Paramètres d'entrées : -
 101          //  Paramètres de sortie : -
 102          //  Notes                : Aucune
 103          //
 104          // *************************************************************************************************
 105          {
 106   1          unsigned char ucRecu = 0;
 107   1          if(ucIndiceIN != ucIndiceOUT)
 108   1          {
 109   2              switch(ucIndiceTrame)
 110   2              {
 111   3                  case 0:
 112   3                      ucRecu = ucCircularBuffer[ucIndiceOUT];
 113   3                      ucCircularBuffer[ucIndiceOUT] = 0x00;
 114   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 115   3                    
 116   3                      if(ucRecu == 'G')
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/03/2019 18:09:14 PAGE 3   

 117   3                      {
 118   4                          ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 119   4                      }
 120   3                      
 121   3                      break;
 122   3                  case 1:
 123   3                      ucRecu = ucCircularBuffer[ucIndiceOUT];
 124   3                      ucCircularBuffer[ucIndiceOUT] = 0x00;
 125   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 126   3                    
 127   3                      if(ucRecu == 'O')
 128   3                      {
 129   4                          ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 130   4                      }
 131   3                      else 
 132   3                      {
 133   4                          ucIndiceTrame = ((ucIndiceTrame - 1) & 0x07);
 134   4                      }
 135   3                      break;
 136   3                  case 2:
 137   3                      tramePtr->adcSensors.touchScreen.x = ucCircularBuffer[ucIndiceOUT];
 138   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 139   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 140   3                      break;
 141   3                  case 3:
 142   3                      tramePtr->adcSensors.touchScreen.y = ucCircularBuffer[ucIndiceOUT];
 143   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 144   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 145   3                      break;
 146   3                  case 4:
 147   3                      tramePtr->adcSensors.gripIntensity = ucCircularBuffer[ucIndiceOUT];
 148   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 149   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 150   3                      break;
 151   3                  case 5:
 152   3                      tramePtr->adcSensors.weightSensor = ucCircularBuffer[ucIndiceOUT];
 153   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 154   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 155   3                      break;
 156   3                  case 6:
 157   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 158   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 159   3                      break;
 160   3                  case 7:
 161   3                      tramePtr->ucCheckSum = ucCircularBuffer[ucIndiceOUT];
 162   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 163   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 164   3                      break;
 165   3              }
 166   2          }
 167   1      }
 168          
 169          void vHandleTrame(struct TramePIC *tramePtr, struct ArmState *statePtr)
 170          {
 171   1          vCircularBuffer(tramePtr);
 172   1          
 173   1          ucTx('G');
 174   1          ucTx('O');
 175   1          ucTx(statePtr->base);
 176   1          ucTx(statePtr->shoulder);
 177   1          ucTx(statePtr->elbow);
 178   1          ucTx(statePtr->wrist);
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/03/2019 18:09:14 PAGE 4   

 179   1          ucTx(statePtr->grip);
 180   1          ucTx(ucHandleCS(statePtr));
 181   1      }
 182          
 183          unsigned char ucHandleCS(struct ArmState *statePtr)
 184          {
 185   1          unsigned char ucCheckSum;
 186   1          ucCheckSum = statePtr->base + statePtr->shoulder + statePtr->elbow + statePtr->wrist + statePtr->grip;
             -  
 187   1          return ucCheckSum;
 188   1      }
 189          
 190          void ucTx(unsigned char ucTransmi)
 191          //
 192          //  Auteur: Hugo Pellerin   
 193          //  Date de création :  19-11-08
 194          //  Version 1.0
 195          //
 196          //  Description: envoie une donner sur UART
 197          //  Paramètres d'entrées : donne a envoyer unsigned char
 198          //  Paramètres de sortie : -
 199          //  Notes                : Aucune
 200          //
 201          // *************************************************************************************************
 202          {
 203   1          ES0 = 0;
 204   1          SBUF0 = ucTransmi;
 205   1          while(TI_0 == 0);
 206   1          TI_0 = 0;
 207   1          ES0 = 1;
 208   1      }
 209          
 210          unsigned char ucKbHit()
 211          //
 212          //  Auteur: Hugo Pellerin   
 213          //  Date de création :  19-10-11
 214          //  Version 1.0
 215          //
 216          //  Description: Test si le flag du port serie est lever
 217          //  Paramètres d'entrées : -
 218          //  Paramètres de sortie : vrai ou faux
 219          //  Notes                : Aucune
 220          //
 221          // *************************************************************************************************
 222          {
 223   1          return (unsigned char) RI_0;
 224   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    618    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
