C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/05/2019 16:48:54 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CIRCULARBUFFER_RXTX
OBJECT MODULE PLACED IN CircularBuffer_RxTx.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CircularBuffer_RxTx.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -TABS(2)

line level    source

   1          /*****************************Contrôle Communication Série*******************************/
   2          /* 
   3             Nom du fichier : CircularBuffer_Rx.c
   4             Auteur : Hugo Pellerin
   5          
   6          Date de creation :  02-12-19
   7           
   8          Fonction necessaire pour reception la trame du PIC
   9              
  10              
  11                
  12          *****************************************************************************************/
  13          #include <stdio.h>   
  14          #include "RxTx232.h"
  15          #include "_DS89C450Modifie.h"       // Définition des bits et des registres du microcontrôleur
  16          #include "_DeclarationGenerale.h"
  17          #include "ProjectDefinitions.h"
  18          #include "CircularBuffer_RxTx.h"
  19          
  20          unsigned char ucRx(void);
  21          unsigned char ucHandleCS(struct ArmState *statePtr);
  22          void ucTx(unsigned char ucTransmi);
  23          
  24          unsigned char ucIndiceIN = 0;
  25          unsigned char ucIndiceOUT = 0;
  26          unsigned char ucIndiceTrame = 0;
  27          unsigned char ucData = 0;
  28          unsigned char ucIsTrameReceived = 0;
  29          
  30          unsigned char ucCircularBuffer[8];
  31          
  32          
  33          void vInitInterrupt(void)
  34          //
  35          //  Auteur: Hugo Pellerin   
  36          //  Date de création :  19-11-08
  37          //  Version 1.0
  38          //
  39          //  Description: initialise les interruption (general, SERIAL0)
  40          //               
  41          //  Paramètres d'entrées : -
  42          //  Paramètres de sortie : -
  43          //  Notes                : Aucune
  44          //
  45          // *************************************************************************************************
  46          {
  47   1          ES0 = 1;    // Permettre interruption du Serial 0
  48   1          EA = 1;     // Permettre les interruptions générale
  49   1      }
  50          
  51          void InterruptionSerie0 (void) interrupt 4
  52          //
  53          //  Auteur: Hugo Pellerin   
  54          //  Date de création :  19-11-08
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/05/2019 16:48:54 PAGE 2   

  55          //  Version 1.0
  56          //
  57          //  Description: remet les flag du port serie a 0 et call RX
  58          //  Paramètres d'entrées : -
  59          //  Paramètres de sortie : vrai ou faux
  60          //  Notes                : Aucune
  61          //
  62          // *************************************************************************************************
  63          {
  64   1          if(RI_0 == 1)
  65   1          {
  66   2              ucData = ucRx();
  67   2              ucCircularBuffer[ucIndiceIN] = ucData;
  68   2              ucIndiceIN = ((ucIndiceIN + 1) & 0x07);
  69   2              RI_0 = 0;
  70   2          }
  71   1          if(TI_0 == 1)
  72   1          {
  73   2              TI_0 = 0;
  74   2          }
  75   1      }
  76          
  77          unsigned char ucRx()
  78          //
  79          //  Auteur: Hugo Pellerin   
  80          //  Date de création :  19-11-08
  81          //  Version 1.0
  82          //
  83          //  Description: met la valeur de SBUF0 dans une varible et appel des fonction pour l'affichage LCD
  84          //  Paramètres d'entrées : -
  85          //  Paramètres de sortie : -
  86          //  Notes                : Aucune
  87          //
  88          // *************************************************************************************************
  89          {
  90   1          unsigned char ucTemp;
  91   1          ucTemp = SBUF0;
  92   1          return ucTemp;
  93   1      }
  94          
  95          void vCircularBuffer(struct TramePIC *tramePtr)
  96          //
  97          //  Auteur: Hugo Pellerin   
  98          //  Date de création :  19-12-02
  99          //  Version 1.0
 100          //
 101          //  Description: 
 102          //  Paramètres d'entrées : -
 103          //  Paramètres de sortie : -
 104          //  Notes                : Aucune
 105          //
 106          // *************************************************************************************************
 107          {
 108   1          unsigned char ucRecu = 0;
 109   1          if(ucIndiceIN != ucIndiceOUT)
 110   1          {
 111   2              switch(ucIndiceTrame)
 112   2              {
 113   3                  case 0:
 114   3                      ucRecu = ucCircularBuffer[ucIndiceOUT];
 115   3                      ucCircularBuffer[ucIndiceOUT] = 0x00;
 116   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/05/2019 16:48:54 PAGE 3   

 117   3                    
 118   3                      if(ucRecu == 'G')
 119   3                      {
 120   4                          ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 121   4                      }
 122   3                      
 123   3                      break;
 124   3                  case 1:
 125   3                      ucRecu = ucCircularBuffer[ucIndiceOUT];
 126   3                      ucCircularBuffer[ucIndiceOUT] = 0x00;
 127   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 128   3                    
 129   3                      if(ucRecu == 'O')
 130   3                      {
 131   4                          ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 132   4                      }
 133   3                      else 
 134   3                      {
 135   4                          ucIndiceTrame = ((ucIndiceTrame - 1) & 0x07);
 136   4                      }
 137   3                      break;
 138   3                  case 2:
 139   3                      tramePtr->adcSensors.touchScreen.x = ucCircularBuffer[ucIndiceOUT];
 140   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 141   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 142   3                      break;
 143   3                  case 3:
 144   3                      tramePtr->adcSensors.touchScreen.y = ucCircularBuffer[ucIndiceOUT];
 145   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 146   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 147   3                      break;
 148   3                  case 4:
 149   3                      tramePtr->adcSensors.gripIntensity = ucCircularBuffer[ucIndiceOUT];
 150   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 151   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 152   3                      break;
 153   3                  case 5:
 154   3                      tramePtr->adcSensors.weightSensor = ucCircularBuffer[ucIndiceOUT];
 155   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 156   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 157   3                      break;
 158   3                  case 6:
 159   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 160   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 161   3                      break;
 162   3                  case 7:
 163   3                      tramePtr->ucCheckSum = ucCircularBuffer[ucIndiceOUT];
 164   3                      ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 165   3                      ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 166   3                      ucIsTrameReceived = 1;    // circular buffer is full and trame is read to be read
 167   3                      break;
 168   3              }
 169   2          }
 170   1      }
 171          
 172          void vSendTrame(struct ArmState *statePtr)
 173          {
 174   1          ucTx('G');
 175   1          ucTx('O');
 176   1          ucTx(statePtr->base);
 177   1          ucTx(statePtr->shoulder);
 178   1          ucTx(statePtr->elbow);
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/05/2019 16:48:54 PAGE 4   

 179   1          ucTx(statePtr->wrist);
 180   1          ucTx(statePtr->grip);
 181   1          ucTx(ucHandleCS(statePtr));
 182   1      }
 183          
 184          unsigned char ucHandleCS(struct ArmState *statePtr)
 185          {
 186   1          unsigned char ucCheckSum;
 187   1          ucCheckSum = (0x47 + 0x4F + statePtr->base + statePtr->shoulder + statePtr->elbow + statePtr->wrist + 
             -statePtr->grip);  
 188   1          return ucCheckSum;
 189   1      }
 190          
 191          void ucTx(unsigned char ucTransmi)
 192          //
 193          //  Auteur: Hugo Pellerin   
 194          //  Date de création :  19-11-08
 195          //  Version 1.0
 196          //
 197          //  Description: envoie une donner sur UART
 198          //  Paramètres d'entrées : donne a envoyer unsigned char
 199          //  Paramètres de sortie : -
 200          //  Notes                : Aucune
 201          //
 202          // *************************************************************************************************
 203          {
 204   1          ES0 = 0;
 205   1          SBUF0 = ucTransmi;
 206   1          while(TI_0 == 0);
 207   1          TI_0 = 0;
 208   1          ES0 = 1;
 209   1      }
 210          
 211          unsigned char ucKbHit()
 212          //
 213          //  Auteur: Hugo Pellerin   
 214          //  Date de création :  19-10-11
 215          //  Version 1.0
 216          //
 217          //  Description: Test si le flag du port serie est lever
 218          //  Paramètres d'entrées : -
 219          //  Paramètres de sortie : vrai ou faux
 220          //  Notes                : Aucune
 221          //
 222          // *************************************************************************************************
 223          {
 224   1          return (unsigned char) RI_0;
 225   1      }
 226          
 227          unsigned char isTrameReceived()
 228          {
 229   1          return ucIsTrameReceived;
 230   1      }
 231          
 232          void resetIsTrameReceived()
 233          {
 234   1          ucIsTrameReceived = 0;
 235   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    645    ----
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/05/2019 16:48:54 PAGE 5   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
