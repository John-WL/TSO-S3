C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/02/2019 17:30:50 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CIRCULARBUFFER_RXTX
OBJECT MODULE PLACED IN CircularBuffer_RxTx.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CircularBuffer_RxTx.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -TABS(2)

line level    source

   1          /*****************************Contrôle Communication Série*******************************/
   2          /* 
   3             Nom du fichier : CircularBuffer_Rx.c
   4             Auteur : Hugo Pellerin
   5          
   6          Date de creation :  02-12-19
   7           
   8          Fonction necessaire pour reception la trame du PIC
   9              
  10              
  11                
  12          *****************************************************************************************/
  13          #include <stdio.h>   
  14          #include "RxTx232.h"
  15          #include "ds89c450.h" 
  16          #include "ProjectDefinitions.h"
  17          #include "CircularBuffer_RxTx.h"
  18          
  19          unsigned char ucRx(void);
  20          void ucTx(unsigned char ucTransmi);
  21          unsigned char ucHandleCS(struct ArmState *statePtr);
  22          
  23          unsigned char ucIndiceIN = 0;
  24          unsigned char ucIndiceOUT = 0;
  25          unsigned char ucIndiceTrame = 0;
  26          unsigned char ucData = 0;
  27          
  28          unsigned char ucCircularBuffer[8];
  29          
  30          
  31          void vInitInterrupt(void)
  32          //
  33          //  Auteur: Hugo Pellerin   
  34          //  Date de création :  19-11-08
  35          //  Version 1.0
  36          //
  37          //  Description: initialise les interruption (general, SERIAL0)
  38          //               
  39          //  Paramètres d'entrées : -
  40          //  Paramètres de sortie : -
  41          //  Notes                : Aucune
  42          //
  43          // *************************************************************************************************
  44          {
  45   1        ES0 = 1;    // Permettre interruption du Serial 0
  46   1        EA = 1;     // Permettre les interruptions générale
  47   1      }
  48          
  49          void InterruptionSerie0 (void) interrupt 4
  50          //
  51          //  Auteur: Hugo Pellerin   
  52          //  Date de création :  19-11-08
  53          //  Version 1.0
  54          //
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/02/2019 17:30:50 PAGE 2   

  55          //  Description: remet les flag du port serie a 0 et call RX
  56          //  Paramètres d'entrées : -
  57          //  Paramètres de sortie : vrai ou faux
  58          //  Notes                : Aucune
  59          //
  60          // *************************************************************************************************
  61          {
  62   1        if(RI_0 == 1)
  63   1        {
  64   2          ucData = ucRx();
  65   2          ucCircularBuffer[ucIndiceIN] = ucData;
  66   2          ucIndiceIN = ((ucIndiceIN + 1) & 0x07);
  67   2          RI_0 = 0;
  68   2        }
  69   1        if(TI_0 == 1)
  70   1        {
  71   2          TI_0 = 0;
  72   2        }
  73   1      }
  74          
  75          unsigned char ucRx()
  76          //
  77          //  Auteur: Hugo Pellerin   
  78          //  Date de création :  19-11-08
  79          //  Version 1.0
  80          //
  81          //  Description: met la valeur de SBUF0 dans une varible et appel des fonction pour l'affichage LCD
  82          //  Paramètres d'entrées : -
  83          //  Paramètres de sortie : -
  84          //  Notes                : Aucune
  85          //
  86          // *************************************************************************************************
  87          {
  88   1        unsigned char ucTemp;
  89   1        ucTemp = SBUF0;
  90   1        return ucTemp;
  91   1      }
  92          
  93          void vCircularBuffer(struct TramePIC *tramePtr)
  94          //
  95          //  Auteur: Hugo Pellerin   
  96          //  Date de création :  19-12-02
  97          //  Version 1.0
  98          //
  99          //  Description: 
 100          //  Paramètres d'entrées : -
 101          //  Paramètres de sortie : -
 102          //  Notes                : Aucune
 103          //
 104          // *************************************************************************************************
 105          {
 106   1        unsigned char ucRecu = 0;
 107   1        if(ucIndiceIN != ucIndiceOUT)
 108   1        {
 109   2          switch(ucIndiceTrame)
 110   2          {
 111   3            case 0:
 112   3              ucRecu = ucCircularBuffer[ucIndiceOUT];
 113   3              ucCircularBuffer[ucIndiceOUT] = 0x00;
 114   3              ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 115   3            
 116   3              if(ucRecu == 'G')
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/02/2019 17:30:50 PAGE 3   

 117   3              {
 118   4                ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 119   4      //          ucTx('G');
 120   4              }
 121   3              
 122   3              break;
 123   3            case 1:
 124   3              ucRecu = ucCircularBuffer[ucIndiceOUT];
 125   3              ucCircularBuffer[ucIndiceOUT] = 0x00;
 126   3              ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 127   3            
 128   3              if(ucRecu == 'O')
 129   3              {
 130   4                ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 131   4      //          ucTx('O');
 132   4              }
 133   3              else 
 134   3              {
 135   4                ucIndiceTrame = ((ucIndiceTrame - 1) & 0x07);
 136   4              }
 137   3              break;
 138   3            case 2:
 139   3              tramePtr->adcSensors.touchScreen.x = ucCircularBuffer[ucIndiceOUT];
 140   3              ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 141   3              ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 142   3      //        ucTx('1');
 143   3              break;
 144   3            case 3:
 145   3             tramePtr->adcSensors.touchScreen.y = ucCircularBuffer[ucIndiceOUT];
 146   3              ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 147   3              ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 148   3      //        ucTx('2');
 149   3              break;
 150   3            case 4:
 151   3              tramePtr->adcSensors.gripIntensity = ucCircularBuffer[ucIndiceOUT];
 152   3              ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 153   3              ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 154   3      //        ucTx('3');
 155   3              break;
 156   3            case 5:
 157   3              tramePtr->adcSensors.weightSensor = ucCircularBuffer[ucIndiceOUT];
 158   3              ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 159   3              ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 160   3              ucTx('4');
 161   3              break;
 162   3            case 6:
 163   3              ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 164   3              ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 165   3      //        ucTx('5');
 166   3              break;
 167   3            case 7:
 168   3              tramePtr->ucCheckSum = ucCircularBuffer[ucIndiceOUT];
 169   3              ucIndiceOUT = ((ucIndiceOUT + 1) & 0x07);
 170   3              ucIndiceTrame = ((ucIndiceTrame + 1) & 0x07);
 171   3      //        ucTx('6');
 172   3              break;
 173   3          }
 174   2        }
 175   1      }
 176          
 177          void vHandleTrame(struct TramePIC *tramePtr, struct ArmState *statePtr)
 178          {
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/02/2019 17:30:50 PAGE 4   

 179   1        vCircularBuffer(tramePtr);
 180   1        
 181   1        ucTx('G');
 182   1        ucTx('O');
 183   1        ucTx(statePtr->base);
 184   1        ucTx(statePtr->shoulder);
 185   1        ucTx(statePtr->elbow);
 186   1        ucTx(statePtr->wrist);
 187   1        ucTx(statePtr->grip);
 188   1        ucTx(ucHandleCS(statePtr));
 189   1      }
 190          unsigned char ucHandleCS(struct ArmState *statePtr)
 191          {
 192   1        unsigned char ucCheckSum;
 193   1        ucCheckSum = statePtr->base + statePtr->shoulder + statePtr->elbow + statePtr->wrist + statePtr->grip;  
 194   1        return ucCheckSum;
 195   1      }
 196          void ucTx(unsigned char ucTransmi)
 197          //
 198          //  Auteur: Hugo Pellerin   
 199          //  Date de création :  19-11-08
 200          //  Version 1.0
 201          //
 202          //  Description: envoie une donner sur UART
 203          //  Paramètres d'entrées : donne a envoyer unsigned char
 204          //  Paramètres de sortie : -
 205          //  Notes                : Aucune
 206          //
 207          // *************************************************************************************************
 208          {
 209   1        ES0 = 0;
 210   1        SBUF0 = ucTransmi;
 211   1        while(TI_0 == 0);
 212   1        TI_0 = 0;
 213   1        ES0 = 1;
 214   1      }
 215          
 216          unsigned char ucKbHit()
 217          //
 218          //  Auteur: Hugo Pellerin   
 219          //  Date de création :  19-10-11
 220          //  Version 1.0
 221          //
 222          //  Description: Test si le flag du port serie est lever
 223          //  Paramètres d'entrées : -
 224          //  Paramètres de sortie : vrai ou faux
 225          //  Notes                : Aucune
 226          //
 227          // *************************************************************************************************
 228          {
 229   1        if(RI_0)
 230   1          return 1;
 231   1        else
 232   1          return 0;
 233   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    710    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12       9
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   CIRCULARBUFFER_RXTX                                               12/02/2019 17:30:50 PAGE 5   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
