C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 15:51:24 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PROJETFINALMAIN
OBJECT MODULE PLACED IN ProjetFinalMain.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ProjetFinalMain.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS
                    -(2)

line level    source

   1          /**************************************************************************************************
   2          Nom du fichier: ProjetFinalMain.c
   3          Auteur: John-William Lebel
   4          Date de création: 2019-11-26
   5          
   6          Versions:
   7          0.1 -> Code base
   8          
   9          ***************************************************************************************************/
  10          
  11          // *************************************************************************************************
  12          //  INCLUDES
  13          // *************************************************************************************************  
  14          
  15          #include "ds89c450.h"       // Définition des bits et des registres du microcontrôleur
  16          #include <stdio.h>          // Prototype de declarations des fonctions I/O  
  17          #include "I2C.h"            // I2C functions handling
  18          #include "RxTx232.h"        // RxTx232 functions handling
  19          #include "LCD.h"            // LCD functions handling
  20          #include "Timer0.h"         // Timer0 initialization handling
  21          #include "TypeConversion.h" // Fonctions useful when it comes to converting values between type representa
             -tions and/or types
  22          //#include "MemoryI2C.h"
  23          #include "ProjectDefinitions.h"
  24          #include "SubOptimizedLcdPrinter.h"
  25          #include "CircularBuffer_Rx.h"
  26          
  27          // *************************************************************************************************
  28          //  CONSTANTES
  29          // *************************************************************************************************
  30          
  31          // in "ProjectDefinitions.h"
  32          
  33          // *************************************************************************************************
  34          //  FONCTIONS LOCALES
  35          // *************************************************************************************************
  36          
  37          void printLcdDeltaCharacters(void);
  38          //void writeSequencesToMemoryI2C(void);     // only needed once when we'll fill up the memory
  39          
  40          // *************************************************************************************************
  41          //  STRUCTURES ET UNIONS
  42          // *************************************************************************************************
  43          
  44          // in "ProjectDefinitions.h"
  45          
  46          // *************************************************************************************************
  47          // VARIABLES GLOBALES
  48          // *************************************************************************************************
  49          struct ArmState currentArmState = { MIDDLE_POSITION,      // base starting position
  50                                              MIDDLE_POSITION,      // shoulder starting position
  51                                              MIDDLE_POSITION,      // elbow starting position
  52                                              MIDDLE_POSITION,      // wrist starting position
  53                                              MAXIMUM_POSITION };   // grip starting position (open)
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 15:51:24 PAGE 2   

  54          
  55          struct TramePIC trame = {{{0xFF, 0xFF}, 0xFF, 0xFF}, 0xFF};   // default readings
  56          unsigned char weightType = NONE_WEIGHT;                   // default to "no weight"
  57          struct KeyboardManualSettings keyboardManualSettings = {MOTOR_0, 5};  // defaultselected motor = base
  58                                                                                // and default manual speed is
  59                                                                                // set to an arbitrary value.
  60          struct SequenceStep currentSequenceIndexes = {0, 0};        // this is to store the current sequence
  61                                                                      // the arm is executing with two indexes:
  62                                                                      // "sequence" and "step". It probably needs
  63                                                                      // a better name... plz be charitable to the community much luv thx.
  64          
  65          unsigned char connectionStateString[4] = LCD_DELTA_OFFLINE_VALUE;
  66                                                                      // OffL/OnL. It's a variable storing the changes to print to the
  67                                                                      // lcd in case we lose contact with the exterior... 
  68          
  69          unsigned char isOperating = 0;                              // variable that tells if we're in manual or automatic funtio
             -nning
  70                                                                      // of the robotic arm.
  71          
  72          unsigned char lcdInitializationContent[4][21] = { {"1:66 2:66 3:66 4:66 "},
  73                                                            {"5:66 X:FF Y:FF P:FF "},
  74                                                            {"B:FF POID:--        "},
  75                                                            {"05 seq:0 step:0 OffL"} };
  76          
  77                // that stupid and massive array might be useful to fill up the I2C memory... just a thought
  78          unsigned char xdata sequences[7][10][5] = { { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  79                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  80                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  81                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  82                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  83                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  84                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  85                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  86                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  87                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
  88          
  89                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  90                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  91                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  92                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  93                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  94                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  95                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  96                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  97                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  98                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
  99          
 100                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 101                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 102                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 103                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 104                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 105                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 106                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 107                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 108                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 109                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 110          
 111                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 112                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 113                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 114                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 15:51:24 PAGE 3   

 115                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 116                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 117                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 118                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 119                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 120                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 121          
 122                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 123                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 124                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 125                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 126                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 127                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 128                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 129                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 130                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 131                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 132          
 133                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 134                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 135                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 136                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 137                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 138                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 139                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 140                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 141                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 142                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 143          
 144                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 145                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 146                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 147                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 148                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 149                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 150                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 151                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 152                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 153                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} } };
 154          
 155          // *************************************************************************************************
 156          // VARIABLES LOCALES
 157          // *************************************************************************************************
 158          
 159          
 160          // *************************************************************************************************
 161          void main(void)
 162          //
 163          //  Auteur: John-William Lebel
 164          //
 165          //  Description: Appelé lorsque le programme démarre
 166          //  Paramètres d'entrées  : Aucun
 167          //  Paramètres de sortie  : Aucun
 168          //  Notes                 : Aucune
 169          //
 170          // *************************************************************************************************
 171          {
 172   1      //    unsigned char keyboardCharacter;  // just a little buffer for the keyboard
 173   1          vInitPortSerie();     // init the serial port to utilize the RxTx232 comunication with the pic16F88
 174   1      //    vInitLCD();           // init the lcd
 175   1      //    //writeSequencesToMemoryI2C();  // that function might be misimplemented... gotta look into how to writ
             -e 350 values to the I2C memory in an optimized fashion
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 15:51:24 PAGE 4   

 176   1      //    initTimer50ms();      // init the timer0
 177   1      //    vAfficheLCDComplet(lcdInitializationContent);         // initialize the content of the lcd
 178   1          vInitInterrupt();     // init interrupt on serial 0
 179   1          
 180   1          while(1)
 181   1          {
 182   2            if(ucKbHit())
 183   2            {
 184   3              getkey();
 185   3            }        
 186   2            vCircularBuffer(&trame);
 187   2      //        if(isOperating)   // the movements of the robot arm are automatic
 188   2      //        {
 189   2      //            //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.ste
             -p, BASE);
 190   2      //            //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.ste
             -p, SHOULDER);
 191   2      //            //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.ste
             -p, ELBOW);
 192   2      //            //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.ste
             -p, WRIST);
 193   2      //            //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.ste
             -p, GRIP);
 194   2      //        }
 195   2      //        else              // the movements of the robot arm are manual; we need to read the keyboard
 196   2      //        {
 197   2      //            //keyboardCharacter = readKeyboardI2C();    // read the keyboard and put the character in a variable
 198   2      //            if(keyboardCharacter != ' ')              // if we read a character
 199   2      //            {
 200   2      //                //handleKey(keyboardCharacter);         // handle the character and update the global variables acco
             -rdignly
 201   2      //            }
 202   2      //        }
 203   2      //        
 204   2      //        //if(isBufferFull)                              // if the circular buffer has sent a whole sequence of 8 valid byte
             -s
 205   2      //        {
 206   2      //                                                      // update the global variables accordingly
 207   2      //        }
 208   2      //        
 209   2      //        // ... gotta finish what happens next!
 210   2          }
 211   1      }
 212          
 213          void printLcdDeltaCharacters()
 214          {
 215   1          printLcdDeltaMotors(&currentArmState);
 216   1          printLcdDeltaTrame(&trame);
 217   1          printLcdDeltaWeightType(&weightType);
 218   1          printLcdDeltaManualSettings(&keyboardManualSettings);
 219   1          printLcdCurrentSequenceStep(&currentSequenceIndexes);
 220   1          printLcdDeltaConnectionState(connectionStateString);
 221   1      }
 222          
 223          //void writeSequencesToMemoryI2C()
 224          //{
 225            //writeMemoryI2C(sequences);
 226          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     80    ----
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 15:51:24 PAGE 5   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    454    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
