C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/04/2019 19:28:19 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PROJETFINALMAIN
OBJECT MODULE PLACED IN ProjetFinalMain.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ProjetFinalMain.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS
                    -(2)

line level    source

   1          /**************************************************************************************************
   2          Nom du fichier: ProjetFinalMain.c
   3          Auteur: John-William Lebel
   4          Date de création: 2019-11-26
   5          
   6          Versions:
   7          0.1 -> Code base
   8          
   9          ***************************************************************************************************/
  10          
  11          // *************************************************************************************************
  12          //  INCLUDES
  13          // *************************************************************************************************  
  14          
  15          #include "ds89c450.h"       // Définition des bits et des registres du microcontrôleur
  16          #include <stdio.h>          // Prototype de declarations des fonctions I/O  
  17          #include "I2C.h"            // I2C functions handling
  18          #include "RxTx232.h"        // RxTx232 functions handling
  19          #include "LCD.h"            // LCD functions handling
  20          #include "Timer0.h"         // Timer0 initialization handling
  21          #include "TypeConversion.h" // Fonctions useful when it comes to converting values between type representa
             -tions and/or types
  22          //#include "MemoryI2C.h"
  23          #include "ProjectDefinitions.h"
  24          #include "SubOptimizedLcdPrinter.h"
  25          #include "KeyboardI2C.h"
  26          #include "CircularBuffer_RxTx.h"
  27          
  28          // *************************************************************************************************
  29          //  CONSTANTES
  30          // *************************************************************************************************
  31          
  32          // in "ProjectDefinitions.h"
  33          
  34          // *************************************************************************************************
  35          //  FONCTIONS LOCALES
  36          // *************************************************************************************************
  37          
  38          void printLcdDeltaCharacters(void);
  39          unsigned char readMemoryI2C(unsigned char* sequence, unsigned char* step, unsigned char armIndex);
  40          //void writeSequencesToMemoryI2C(void);     // only needed once when we'll fill up the memory
  41          
  42          // *************************************************************************************************
  43          //  STRUCTURES ET UNIONS
  44          // *************************************************************************************************
  45          
  46          // in "ProjectDefinitions.h"
  47          
  48          // *************************************************************************************************
  49          // VARIABLES GLOBALES
  50          // *************************************************************************************************
  51          
  52          struct ArmState currentArmState = { MIDDLE_POSITION,      // base starting position
  53                                              MIDDLE_POSITION,      // shoulder starting position
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/04/2019 19:28:19 PAGE 2   

  54                                              MIDDLE_POSITION,      // elbow starting position
  55                                              MIDDLE_POSITION,      // wrist starting position
  56                                              MAXIMUM_POSITION };   // grip starting position (open)
  57          
  58          struct Compteur stCompteur = {0, 0, 0};
  59          
  60          struct TramePIC trame = {{{0xFF, 0xFF}, 0xFF, 0xFF}, 0xFF};   // default readings
  61          unsigned char weightType = NONE_WEIGHT;                   // default to "no weight"
  62          struct KeyboardManualSettings keyboardManualSettings = {MOTOR_0, 5};  // defaultselected motor = base
  63                                                                                // and default manual speed is
  64                                                                                // set to an arbitrary value.
  65          struct SequenceStep currentSequenceIndexes = {0, 0};        // this is to store the current sequence
  66                                                                      // the arm is executing with two indexes:
  67                                                                      // "sequence" and "step". It probably needs
  68                                                                      // a better name... plz be charitable to the community much luv thx.
  69          
  70          unsigned char* connectionStateString = LCD_DELTA_OFFLINE_VALUE;
  71                                                                      // OffL/OnL. It's a variable storing the changes to print to the
  72                                                                      // lcd in case we lose contact with the exterior... 
  73          
  74          unsigned char isOperating = 0;                              // variable that tells if we're in manual or automatic funtio
             -nning
  75                                                                      // of the robotic arm.
  76          
  77          
  78          unsigned char lcdInitializationContent[4][21] = { {"1:66 2:66 3:66 4:66 "},
  79                                                            {"5:66 X:FF Y:FF P:FF "},
  80                                                            {"B:FF Poid:Aucun     "},
  81                                                            {"05 seq:0 step:0 OffL"} };
  82          
  83                // that stupid and massive array might be useful to fill up the I2C memory... just a thought
  84          unsigned char xdata sequences[7][10][5] = { { {0x0C, 0x4C, 0x1C, 0x51, 0x00},
  85                                                        {0x0C, 0x73, 0x1C, 0x51, 0x00},
  86                                                        {0x0C, 0x78, 0x23, 0x51, 0x00},
  87                                                        {0x0C, 0x78, 0x23, 0x51, 0xFF}, // position A6 sur le touchscreen
  88                                                        {0x0C, 0x78, 0x23, 0x51, 0xFF},
  89                                                        {0x0C, 0x78, 0x23, 0x51, 0xFF},
  90                                                        {0x0C, 0x78, 0x23, 0x51, 0xFF},
  91                                                        {0x0C, 0x78, 0x23, 0x51, 0xFF},
  92                                                        {0x0C, 0x78, 0x23, 0x51, 0xFF},
  93                                                        {0x0C, 0x78, 0x23, 0x51, 0xFF} }, 
  94          
  95                                                      { {0x11, 0x4C, 0x05, 0x4D, 0x00},
  96                                                        {0x11, 0x5E, 0x00, 0x4D, 0x00},
  97                                                        {0x11, 0x69, 0x0C, 0x4D, 0x00},
  98                                                        {0x11, 0x69, 0x0C, 0x4D, 0xFF}, // position B2 sur le touchscreen
  99                                                        {0x11, 0x69, 0x0C, 0x4D, 0xFF},
 100                                                        {0x11, 0x69, 0x0C, 0x4D, 0xFF},
 101                                                        {0x11, 0x69, 0x0C, 0x4D, 0xFF},
 102                                                        {0x11, 0x69, 0x0C, 0x4D, 0xFF},
 103                                                        {0x11, 0x69, 0x0C, 0x4D, 0xFF},
 104                                                        {0x11, 0x69, 0x0C, 0x4D, 0xFF} },
 105          
 106                                                      { {0x15, 0x4C, 0x13, 0x51, 0x00},
 107                                                        {0x15, 0x6B, 0x13, 0x51, 0x00},
 108                                                        {0x15, 0x75, 0x1E, 0x51, 0x00},
 109                                                        {0x15, 0x75, 0x1E, 0x51, 0xFF}, // position C5 sur le touchscreen
 110                                                        {0x15, 0x75, 0x1E, 0x51, 0xFF},
 111                                                        {0x15, 0x75, 0x1E, 0x51, 0xFF},
 112                                                        {0x15, 0x75, 0x1E, 0x51, 0xFF},
 113                                                        {0x15, 0x75, 0x1E, 0x51, 0xFF},
 114                                                        {0x15, 0x75, 0x1E, 0x51, 0xFF},
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/04/2019 19:28:19 PAGE 3   

 115                                                        {0x15, 0x75, 0x1E, 0x51, 0xFF} },
 116          
 117                                                      { {0x0B, 0x64, 0x4A, 0x66, 0xFF},
 118                                                        {0x0B, 0x81, 0x39, 0x66, 0xFF},
 119                                                        {0x0B, 0x81, 0x39, 0x66, 0x00}, // position balance
 120                                                        {0x0B, 0x81, 0x39, 0x66, 0x00},
 121                                                        {0x0B, 0x81, 0x39, 0x66, 0x00},
 122                                                        {0x0B, 0x81, 0x39, 0x66, 0x00},
 123                                                        {0x0B, 0x81, 0x39, 0x66, 0x00},
 124                                                        {0x0B, 0x81, 0x39, 0x66, 0x00},
 125                                                        {0x0B, 0x81, 0x39, 0x66, 0x00},
 126                                                        {0x0B, 0x81, 0x39, 0x66, 0x00} }, // position balance PINCE RELÂCHÉE (on fait comme
             -nt pour prendre des mesures sinon)
 127          
 128                                                      { {0x0B, 0x81, 0x39, 0x66, 0xFF}, // position balance (pince fermée)
 129                                                        {0x20, 0x60, 0x37, 0x5C, 0xFF},
 130                                                        {0x20, 0x82, 0x37, 0x5C, 0xFF},
 131                                                        {0x20, 0x82, 0x37, 0x5C, 0x00}, // position bleu (AA)
 132                                                        {0x20, 0x4C, 0x37, 0xA0, 0x00},
 133                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00}, // position DE REPOS 
 134                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 135                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 136                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 137                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00} },
 138                                                      
 139                                                      { {0x0B, 0x81, 0x39, 0x66, 0xFF}, // position balance (pince fermée)
 140                                                        {0x1C, 0x60, 0x31, 0x5C, 0xFF},
 141                                                        {0x1C, 0x7E, 0x31, 0x5C, 0xFF},
 142                                                        {0x1C, 0x7E, 0x31, 0x5C, 0x00}, // position vert (C)
 143                                                        {0x1C, 0x4C, 0x31, 0xA0, 0x00},
 144                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00}, // position DE REPOS
 145                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 146                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 147                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 148                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00} },
 149          
 150                                                      { {0x0B, 0x81, 0x39, 0x66, 0xFF}, // position balance (pince fermée)
 151                                                        {0x18, 0x60, 0x2D, 0x5C, 0xFF},
 152                                                        {0x18, 0x7C, 0x2D, 0x5C, 0xFF},
 153                                                        {0x18, 0x7C, 0x2D, 0x5C, 0x00}, // position rouge (9V)
 154                                                        {0x18, 0x4C, 0x2D, 0xA0, 0x00},
 155                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00}, // position DE REPOS
 156                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 157                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 158                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00},
 159                                                        {0x10, 0x4C, 0x00, 0xA0, 0x00} } };
 160          
 161          // *************************************************************************************************
 162          // VARIABLES LOCALES
 163          // *************************************************************************************************
 164          
 165          
 166          // *************************************************************************************************
 167          void main(void)
 168          //
 169          //  Auteur: John-William Lebel
 170          //
 171          //  Description: Appelé lorsque le programme démarre
 172          //  Paramètres d'entrées  : Aucun
 173          //  Paramètres de sortie  : Aucun
 174          //  Notes                 : Aucune
 175          //
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/04/2019 19:28:19 PAGE 4   

 176          // *************************************************************************************************
 177          {
 178   1          vInitPortSerie();     // init the serial port to utilize the RxTx232 comunication with the pic16F88
 179   1          vInitLCD();           // init the lcd
 180   1          //writeSequencesToMemoryI2C();  // that function might be misimplemented... gotta look into how to write 
             -350 values to the I2C memory in an optimized fashion
 181   1          initTimer50ms();      // init the timer0
 182   1          vAfficheLCDComplet(lcdInitializationContent);         // initialize the content of the lcd
 183   1          vInitInterrupt();     // init interrupt on serial 0
 184   1          
 185   1          while(1)
 186   1          {
 187   2            
 188   2              if(isOperating)   // the movements of the robot arm are automatic
 189   2              {
 190   3                  /*currentArmState.base = readMemoryI2C(&currentSequenceIndexes.sequence, &currentSequenceIndexes.ste
             -p, BASE);
 191   3                  currentArmState.shoulder = readMemoryI2C(&currentSequenceIndexes.sequence, &currentSequenceIndexes.s
             -tep, SHOULDER);
 192   3                  currentArmState.elbow = readMemoryI2C(&currentSequenceIndexes.sequence, &currentSequenceIndexes.step
             -, ELBOW);
 193   3                  currentArmState.wrist = readMemoryI2C(&currentSequenceIndexes.sequence, &currentSequenceIndexes.step
             -, WRIST);
 194   3                  currentArmState.grip = readMemoryI2C(&currentSequenceIndexes.sequence, &currentSequenceIndexes.step,
             - GRIP);*/
 195   3                
 196   3                  currentArmState.base = sequences[currentSequenceIndexes.sequence][currentSequenceIndexes.step]
             -[BASE];
 197   3                  currentArmState.shoulder = sequences[currentSequenceIndexes.sequence][currentSequenceIndexes.step][S
             -HOULDER];
 198   3                  currentArmState.elbow = sequences[currentSequenceIndexes.sequence][currentSequenceIndexes.step][ELBO
             -W];
 199   3                  currentArmState.wrist = sequences[currentSequenceIndexes.sequence][currentSequenceIndexes.step][WRIS
             -T];
 200   3                  currentArmState.grip = sequences[currentSequenceIndexes.sequence][currentSequenceIndexes.step][GRIP]
             -;
 201   3              }
 202   2              else              // the movements of the robot arm are manual; we need to read the keyboard
 203   2              {
 204   3                  handleKey(readKeyboardI2C(), &keyboardManualSettings, &currentArmState);    // read the keyboard and u
             -pdate the variables accordingly
 205   3                  
 206   3                  if(trame.adcSensors.touchScreen.x != 0xFF && trame.adcSensors.touchScreen.y != 0xFF)
 207   3                  {
 208   4                      //if(isIn)
 209   4                  }
 210   3              }
 211   2              
 212   2              // ... gotta finish what happens next!
 213   2              if(TF0 == 1)
 214   2              {
 215   3                  vUpdateCompteurTimer0(&stCompteur);
 216   3              }
 217   2              
 218   2              if(stCompteur.ucCompteur300ms > 5)
 219   2              {
 220   3                  stCompteur.ucCompteur300ms = 0;
 221   3                  connectionStateString = LCD_DELTA_OFFLINE_VALUE;
 222   3              }
 223   2              
 224   2              if(stCompteur.ucCompteur200ms > 3)
 225   2              {
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/04/2019 19:28:19 PAGE 5   

 226   3                  stCompteur.ucCompteur200ms = 0;
 227   3                  printLcdDeltaCharacters();
 228   3              }
 229   2              
 230   2              if(stCompteur.ucCompteur2sec > 39)
 231   2              {
 232   3                  stCompteur.ucCompteur2sec = 0;
 233   3              }
 234   2              
 235   2              if(isTrameReceived())
 236   2              {
 237   3                  stCompteur.ucCompteur300ms = 0;
 238   3                  connectionStateString = LCD_DELTA_ONLINE_VALUE;
 239   3                
 240   3                  resetIsTrameReceived();
 241   3                  vSendTrame(&currentArmState);
 242   3              }
 243   2              
 244   2              vCircularBuffer(&trame);
 245   2          }
 246   1      }
 247          
 248          void printLcdDeltaCharacters()
 249          {
 250   1          printLcdDeltaMotors(&currentArmState);
 251   1          printLcdDeltaTrame(&trame);
 252   1          printLcdDeltaWeightType(&weightType);
 253   1          printLcdDeltaManualSettings(&keyboardManualSettings);
 254   1          printLcdCurrentSequenceStep(&currentSequenceIndexes);
 255   1          printLcdDeltaConnectionState(connectionStateString);
 256   1      }
 257          
 258          unsigned char readMemoryI2C(unsigned char* sequence, unsigned char* step, unsigned char armIndex)
 259          {
 260   1          int memoryAddress = *sequence + (*step << 4) + (armIndex << 8);
 261   1          return ucLireMemI2C(memoryAddress);
 262   1      }
 263          
 264          //void writeSequencesToMemoryI2C()
 265          //{
 266            //writeMemoryI2C(sequences);
 267          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    480    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =    456       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
