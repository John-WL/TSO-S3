C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 20:17:07 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PROJETFINALMAIN
OBJECT MODULE PLACED IN ProjetFinalMain.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ProjetFinalMain.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /**************************************************************************************************
   2          Nom du fichier: ProjetFinalMain.c
   3          Auteur: John-William Lebel
   4          Date de création: 2019-11-26
   5          
   6          Versions:
   7          0.1 -> Code base
   8          
   9          ***************************************************************************************************/
  10          
  11          // *************************************************************************************************
  12          //  INCLUDES
  13          // *************************************************************************************************  
  14          
  15          #include "ds89c450.h"       // Définition des bits et des registres du microcontrôleur
  16          #include <stdio.h>          // Prototype de declarations des fonctions I/O  
  17          #include "I2C.h"            // I2C functions handling
  18          #include "RxTx232.h"        // RxTx232 functions handling
  19          #include "LCD.h"            // LCD functions handling
  20          #include "Timer0.h"         // Timer0 initialization handling
  21          #include "TypeConversion.h" // Fonctions useful when it comes to converting values between type representa
             -tions and/or types
  22          
  23          // *************************************************************************************************
  24          //  CONSTANTES
  25          // *************************************************************************************************
  26          
  27          #define MINIMUM_POSITION 205
  28          #define MIDDLE_POSITION 102
  29          #define MAXIMUM_POSITION 0
  30          
  31          #define BASE     0
  32          #define SHOULDER 1
  33          #define ELBOW    2
  34          #define WRIST    3
  35          #define GRIP     4
  36          
  37          #define MOTOR_0 0
  38          #define MOTOR_1 1
  39          #define MOTOR_2 2
  40          #define MOTOR_3 3
  41          #define MOTOR_4 4
  42          
  43          #define BLUE_WEIGHT  0
  44          #define GREEN_WEIGHT 1
  45          #define RED_WEIGHT   2
  46          #define NONE_WEIGHT  3
  47          
  48          #define LCD_DELTA_ONLINE_VALUE  "nL "   // used with the connectionStateString[] array
  49          #define LCD_DELTA_OFFLINE_VALUE "ffL"   // to display on the LCD. The 'O' is always there
  50                                                  // so there's no need to store it explicitely.
  51          
  52          #define LCD_LINE0 0
  53          #define LCD_LINE1 1
  54          #define LCD_LINE2 2
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 20:17:07 PAGE 2   

  55          #define LCD_LINE3 3
  56          
  57          #define LCD_MOTOR_0_DIGIT_POSITION_0 2
  58          #define LCD_MOTOR_0_DIGIT_POSITION_1 3
  59          
  60          #define LCD_MOTOR_1_DIGIT_POSITION_0 7
  61          #define LCD_MOTOR_1_DIGIT_POSITION_1 8
  62          
  63          #define LCD_MOTOR_2_DIGIT_POSITION_0 12
  64          #define LCD_MOTOR_2_DIGIT_POSITION_1 13
  65          
  66          #define LCD_MOTOR_3_DIGIT_POSITION_0 17
  67          #define LCD_MOTOR_3_DIGIT_POSITION_1 18
  68          
  69          #define LCD_MOTOR_4_DIGIT_POSITION_0 2
  70          #define LCD_MOTOR_4_DIGIT_POSITION_1 3
  71          
  72          #define LCD_TOUCH_SCREEN_X_DIGIT_POSITION_0 7
  73          #define LCD_TOUCH_SCREEN_X_DIGIT_POSITION_1 8
  74          
  75          #define LCD_TOUCH_SCREEN_Y_DIGIT_POSITION_0 12
  76          #define LCD_TOUCH_SCREEN_Y_DIGIT_POSITION_1 13
  77          
  78          #define LCD_GRIP_INTENSITY_DIGIT_POSITION_0 17
  79          #define LCD_GRIP_INTENSITY_DIGIT_POSITION_1 18
  80          
  81          #define LCD_WEIGHT_SENSOR_DIGIT_POSITION_0 2
  82          #define LCD_WEIGHT_SENSOR_DIGIT_POSITION_1 3
  83          
  84          #define LCD_WEIGHT_TYPE_DIGIT_POSITION_0 10
  85          #define LCD_WEIGHT_TYPE_DIGIT_POSITION_1 11
  86          #define LCD_WEIGHT_TYPE_DIGIT_POSITION_2 12
  87          #define LCD_WEIGHT_TYPE_DIGIT_POSITION_3 13
  88          #define LCD_WEIGHT_TYPE_DIGIT_POSITION_4 14
  89          
  90          #define LCD_MANUAL_MOTOR_SPEED_DIGIT_POSITION_0 0
  91          #define LCD_MANUAL_MOTOR_SPEED_DIGIT_POSITION_1 1
  92          
  93          #define LCD_SEQ_DIGIT_POSITION  7
  94          #define LCD_STEP_DIGIT_POSITION 14
  95          
  96          #define LCD_CONNECTION_STATE_DIGIT_POSITION_0 17
  97          #define LCD_CONNECTION_STATE_DIGIT_POSITION_1 18
  98          #define LCD_CONNECTION_STATE_DIGIT_POSITION_2 19
  99          
 100          // *************************************************************************************************
 101          //  FONCTIONS LOCALES
 102          // *************************************************************************************************
 103          
 104          
 105          // *************************************************************************************************
 106          //  STRUCTURES ET UNIONS
 107          // *************************************************************************************************
 108          struct ArmState
 109          {
 110              unsigned char base;
 111              unsigned char shoulder;
 112              unsigned char elbow;
 113              unsigned char wrist;
 114              unsigned char grip;
 115          };
 116          
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 20:17:07 PAGE 3   

 117          struct TouchScreen
 118          {
 119              unsigned char x;
 120              unsigned char y;
 121          };
 122          
 123          struct AdcSensors
 124          {
 125              struct TouchScreen touchScreen;
 126              unsigned char gripIntensity;
 127              unsigned char weightSensor;
 128          };
 129          
 130          struct SequenceStep
 131          {
 132              unsigned char sequence;
 133              unsigned char step;
 134          };
 135          
 136          struct KeyboardManualSettings
 137          {
 138              unsigned char manualySelectedMotor;
 139              unsigned char manualMovingSpeed;
 140          };
 141          
 142          // *************************************************************************************************
 143          // VARIABLES GLOBALES
 144          // *************************************************************************************************
 145          struct ArmState currentArmState = { MIDDLE_POSITION,      // base starting position
 146                                              MIDDLE_POSITION,      // shoulder starting position
 147                                              MIDDLE_POSITION,      // elbow starting position
 148                                              MIDDLE_POSITION,      // wrist starting position
 149                                              MAXIMUM_POSITION };   // grip starting position (open)
 150          
 151          struct AdcSensors sensors = {{0xFF, 0xFF}, 0xFF, 0xFF};   // default readings
 152          unsigned char weightType = NONE_WEIGHT;                   // default to "no weight"
 153          struct KeyboardManualSettings keyboardManualSettings = {MOTOR_0, 5};  // defaultselected motor = base
 154                                                                                // and default manual speed is
 155                                                                                // set to an arbitrary value.
 156          struct SequenceStep currentSequenceIndexes = {0, 0};        // this is to store the current sequence
 157                                                                      // the arm is executing with two indexes:
 158                                                                      // "sequence" and "step". It probably needs
 159                                                                      // a better name... plz be charitable to the community much luv thx.
 160          
 161          unsigned char connectionStateString[4] = LCD_DELTA_OFFLINE_VALUE;
 162                                                                      // OffL/OnL. It's a variable storing the changes to print to the
 163                                                                      // lcd in case we lose contact with the exterior... 
 164          
 165          unsigned char isOperating = 0;                              // variable that tells if we're in manual or automatic funtio
             -nning
 166                                                                      // of the robotic arm.
 167          
 168          unsigned char lcdInitializationContent[4][21] = { {"1:66 2:66 3:66 4:66 "},
 169                                                            {"5:66 X:FF Y:FF P:FF "},
 170                                                            {"B:FF POID:--        "},
 171                                                            {"05 seq:0 step:0 OffL"} };
 172          
 173          unsigned char xdata sequences[7][10][5] = { { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 174                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 175                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 176                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 177                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 20:17:07 PAGE 4   

 178                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 179                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 180                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 181                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 182                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 183          
 184                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 185                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 186                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 187                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 188                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 189                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 190                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 191                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 192                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 193                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 194          
 195                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 196                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 197                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 198                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 199                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 200                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 201                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 202                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 203                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 204                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 205          
 206                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 207                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 208                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 209                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 210                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 211                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 212                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 213                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 214                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 215                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 216          
 217                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 218                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 219                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 220                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 221                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 222                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 223                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 224                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 225                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 226                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 227          
 228                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 229                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 230                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 231                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 232                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 233                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 234                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 235                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 236                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 237                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 238          
 239                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 20:17:07 PAGE 5   

 240                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 241                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 242                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 243                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 244                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 245                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 246                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 247                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 248                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} } };
 249          
 250          // *************************************************************************************************
 251          // VARIABLES LOCALES
 252          // *************************************************************************************************
 253          
 254          
 255          // *************************************************************************************************
 256          void main(void)
 257          //
 258          //  Auteur: John-William Lebel
 259          //
 260          //  Description: Appelé lorsque le programme démarre
 261          //  Paramètres d'entrées  : Aucun
 262          //  Paramètres de sortie  : Aucun
 263          //  Notes                 : Aucune
 264          //
 265          // *************************************************************************************************
 266          {
 267   1          unsigned char keyboardCharacter;  // just a little buffer for the keyboard
 268   1          vInitPortSerie();     // init the serial port to utilize the RxTx232 comunication with the pic16F88
 269   1          vInitLCD();           // init the lcd
 270   1          initTimer50ms();      // init the timer0
 271   1        
 272   1          vAfficheLCDComplet(lcdInitializationContent);         // initialize the content of the lcd
 273   1          
 274   1          while(1)
 275   1          {
 276   2              if(isOperating)   // the movements of the robot arm are automatic
 277   2              {
 278   3                  currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step, B
             -ASE);
*** WARNING C206 IN LINE 278 OF ProjetFinalMain.c: 'readMemoryI2C': missing function-prototype
*** ERROR C267 IN LINE 278 OF ProjetFinalMain.c: 'readMemoryI2C': requires ANSI-style prototype
 279   3                  currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step, S
             -HOULDER);
 280   3                  currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step, E
             -LBOW);
 281   3                  currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step, W
             -RIST);
 282   3                  currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step, G
             -RIP);
 283   3              }
 284   2              else              // the movements of the robot arm are manual; we need to read the keyboard
 285   2              {
 286   3                  keyboardCharacter = readKeyboardI2C();    // read the keyboard and put the character in a variable
 287   3                  if(keyboardCharacter != ' ')              // if we read a character
 288   3                  {
 289   4                      handleKey(keyboardCharacter);         // handle the character and update the global variables accordig
             -nly
 290   4                  }
 291   3              }
 292   2              
 293   2              if(isBufferFull)                              // if the circular buffer has sent a whole sequence of 8 valid bytes
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 20:17:07 PAGE 6   

 294   2              {
 295   3                                                            // update the global variables accordingly
 296   3              }
 297   2              
 298   2              // ... gotta finish what happens next!
 299   2          }
 300   1      }
 301          
 302          void printLcdDeltaCharacters()
 303          {
 304   1          printLcdDeltaMotors();
 305   1          printLcdDeltaSensors();
 306   1          printLcdDeltaWeightType();
 307   1          printLcdDeltaManualSettings();
 308   1          printLcdCurrentSequenceStep();
 309   1          printLcdDeltaConnectionState();
 310   1      }
 311          
 312          void printLcdDeltaMotors()
 313          {
 314   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.base, 0), LCD_LINE0, LCD_MOTOR_0_DIGIT_POSITI
             -ON_0);
 315   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.base, 1), LCD_LINE0, LCD_MOTOR_0_DIGIT_POSITI
             -ON_1);
 316   1                                                      
 317   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.shoulder, 0), LCD_LINE0, LCD_MOTOR_1_DIGIT_PO
             -SITION_0);
 318   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.shoulder, 1), LCD_LINE0, LCD_MOTOR_1_DIGIT_PO
             -SITION_1);
 319   1                                                      
 320   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.elbow, 0), LCD_LINE0, LCD_MOTOR_2_DIGIT_POSIT
             -ION_0);
 321   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.elbow, 1), LCD_LINE0, LCD_MOTOR_2_DIGIT_POSIT
             -ION_1);
 322   1                                                      
 323   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.wrist, 0), LCD_LINE0, LCD_MOTOR_3_DIGIT_POSIT
             -ION_0);
 324   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.wrist, 1), LCD_LINE0, LCD_MOTOR_3_DIGIT_POSIT
             -ION_1);
 325   1                                                      
 326   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.grip, 0), LCD_LINE1, LCD_MOTOR_4_DIGIT_POSITI
             -ON_0);
 327   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(currentArmState.grip, 1), LCD_LINE1, LCD_MOTOR_4_DIGIT_POSITI
             -ON_1);
 328   1      }
 329          
 330          void printLcdDeltaSensors()
 331          {
 332   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(sensors.touchScreen.x, 0), LCD_LINE1, LCD_TOUCH_SCREEN_X_DIGI
             -T_POSITION_0);
 333   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(sensors.touchScreen.x, 1), LCD_LINE1, LCD_TOUCH_SCREEN_X_DIGI
             -T_POSITION_1);
 334   1                                                      
 335   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(sensors.touchScreen.y, 0), LCD_LINE1, LCD_TOUCH_SCREEN_Y_DIGI
             -T_POSITION_0);
 336   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(sensors.touchScreen.y, 1), LCD_LINE1, LCD_TOUCH_SCREEN_Y_DIGI
             -T_POSITION_1);
 337   1                                                      
 338   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(sensors.gripIntensity, 0), LCD_LINE1, LCD_GRIP_INTENSITY_DIGI
             -T_POSITION_0);
 339   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(sensors.gripIntensity, 1), LCD_LINE1, LCD_GRIP_INTENSITY_DIGI
             -T_POSITION_1);
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 20:17:07 PAGE 7   

 340   1          
 341   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(sensors.weightSensor, 0), LCD_LINE2, LCD_WEIGHT_SENSOR_DIGIT_
             -POSITION_0);
 342   1          vLcdEcrireCaract(unsignedCharToHexaDecimal(sensors.weightSensor, 1), LCD_LINE2, LCD_WEIGHT_SENSOR_DIGIT_
             -POSITION_1);
 343   1      }
 344          
 345          void printLcdDeltaWeightType()
 346          {
 347   1          vLcdEcrireCaract(weightTypeToString(&weightType)[0], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_0);
 348   1          vLcdEcrireCaract(weightTypeToString(&weightType)[1], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_1);
 349   1          vLcdEcrireCaract(weightTypeToString(&weightType)[2], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_2);
 350   1          vLcdEcrireCaract(weightTypeToString(&weightType)[3], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_3);
 351   1          vLcdEcrireCaract(weightTypeToString(&weightType)[4], LCD_LINE2, LCD_WEIGHT_TYPE_DIGIT_POSITION_4);
 352   1      }
 353          
 354          void printLcdDeltaManualSettings()
 355          {
 356   1          vLcdEcrireCaract(unsignedCharToDecimal(keyboardManualSettings.manualMovingSpeed, 0), LCD_LINE3, LCD_MANU
             -ALY_SELECTED_MOTOR_DIGIT_POSITION_0);
 357   1          vLcdEcrireCaract(unsignedCharToDecimal(keyboardManualSettings.manualMovingSpeed, 0), LCD_LINE3, LCD_MANU
             -ALY_SELECTED_MOTOR_DIGIT_POSITION_1);
 358   1      }
 359          
 360          void printLcdCurrentSequenceStep()
 361          {
 362   1          vLcdEcrireCaract(currentSequenceIndexes.sequence, LCD_LINE3, LCD_SEQ_DIGIT_POSITION);
 363   1          vLcdEcrireCaract(currentSequenceIndexes.step, LCD_LINE3, LCD_STEP_DIGIT_POSITION);
 364   1      }
 365          
 366          void printLcdDeltaConnectionState()
 367          {
 368   1          vLcdEcrireCaract(connectionStateString[0], LCD_LINE3, LCD_CONNECTION_STATE_DIGIT_POSITION_0);
 369   1          vLcdEcrireCaract(connectionStateString[1], LCD_LINE3, LCD_CONNECTION_STATE_DIGIT_POSITION_1);
 370   1          vLcdEcrireCaract(connectionStateString[2], LCD_LINE3, LCD_CONNECTION_STATE_DIGIT_POSITION_2);
 371   1      }
 372          
 373          void writeSequencesToMemoryI2C()
 374          {
 375   1        writeMemoryI2C(sequences);
 376   1      }

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
