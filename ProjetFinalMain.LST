C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 21:50:55 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PROJETFINALMAIN
OBJECT MODULE PLACED IN ProjetFinalMain.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ProjetFinalMain.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /**************************************************************************************************
   2          Nom du fichier: ProjetFinalMain.c
   3          Auteur: John-William Lebel
   4          Date de création: 2019-11-26
   5          
   6          Versions:
   7          0.1 -> Code base
   8          
   9          ***************************************************************************************************/
  10          
  11          // *************************************************************************************************
  12          //  INCLUDES
  13          // *************************************************************************************************  
  14          
  15          #include "ds89c450.h"       // Définition des bits et des registres du microcontrôleur
  16          #include <stdio.h>          // Prototype de declarations des fonctions I/O  
  17          #include "I2C.h"            // I2C functions handling
  18          #include "RxTx232.h"        // RxTx232 functions handling
  19          #include "LCD.h"            // LCD functions handling
  20          #include "Timer0.h"         // Timer0 initialization handling
  21          #include "TypeConversion.h" // Fonctions useful when it comes to converting values between type representa
             -tions and/or types
  22          //#include "MemoryI2C.h"
  23          #include "ProjectDefinitions.h"
  24          #include "SubOptimizedLcdPrinter.h"
  25          
  26          // *************************************************************************************************
  27          //  CONSTANTES
  28          // *************************************************************************************************
  29          
  30          // in "ProjectDefinitions.h"
  31          
  32          // *************************************************************************************************
  33          //  FONCTIONS LOCALES
  34          // *************************************************************************************************
  35          
  36          void printLcdDeltaCharacters(void);
  37          //void writeSequencesToMemoryI2C(void);     // only needed once when we'll fill up the memory
  38          
  39          // *************************************************************************************************
  40          //  STRUCTURES ET UNIONS
  41          // *************************************************************************************************
  42          
  43          // in "ProjectDefinitions.h"
  44          
  45          // *************************************************************************************************
  46          // VARIABLES GLOBALES
  47          // *************************************************************************************************
  48          struct ArmState currentArmState = { MIDDLE_POSITION,      // base starting position
  49                                              MIDDLE_POSITION,      // shoulder starting position
  50                                              MIDDLE_POSITION,      // elbow starting position
  51                                              MIDDLE_POSITION,      // wrist starting position
  52                                              MAXIMUM_POSITION };   // grip starting position (open)
  53          
  54          struct AdcSensors sensors = {{0xFF, 0xFF}, 0xFF, 0xFF};   // default readings
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 21:50:55 PAGE 2   

  55          unsigned char weightType = NONE_WEIGHT;                   // default to "no weight"
  56          struct KeyboardManualSettings keyboardManualSettings = {MOTOR_0, 5};  // defaultselected motor = base
  57                                                                                // and default manual speed is
  58                                                                                // set to an arbitrary value.
  59          struct SequenceStep currentSequenceIndexes = {0, 0};        // this is to store the current sequence
  60                                                                      // the arm is executing with two indexes:
  61                                                                      // "sequence" and "step". It probably needs
  62                                                                      // a better name... plz be charitable to the community much luv thx.
  63          
  64          unsigned char connectionStateString[4] = LCD_DELTA_OFFLINE_VALUE;
  65                                                                      // OffL/OnL. It's a variable storing the changes to print to the
  66                                                                      // lcd in case we lose contact with the exterior... 
  67          
  68          unsigned char isOperating = 0;                              // variable that tells if we're in manual or automatic funtio
             -nning
  69                                                                      // of the robotic arm.
  70          
  71          unsigned char lcdInitializationContent[4][21] = { {"1:66 2:66 3:66 4:66 "},
  72                                                            {"5:66 X:FF Y:FF P:FF "},
  73                                                            {"B:FF POID:--        "},
  74                                                            {"05 seq:0 step:0 OffL"} };
  75          
  76                // that stupid and massive array might be useful to fill up the I2C memory... just a thought
  77          unsigned char xdata sequences[7][10][5] = { { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  78                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  79                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  80                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  81                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  82                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  83                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  84                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  85                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  86                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
  87          
  88                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  89                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  90                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  91                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  92                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  93                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  94                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  95                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  96                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  97                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
  98          
  99                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 100                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 101                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 102                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 103                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 104                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 105                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 106                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 107                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 108                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 109          
 110                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 111                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 112                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 113                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 114                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 115                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 21:50:55 PAGE 3   

 116                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 117                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 118                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 119                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 120          
 121                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 122                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 123                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 124                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 125                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 126                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 127                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 128                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 129                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 130                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 131          
 132                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 133                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 134                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 135                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 136                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 137                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 138                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 139                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 140                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 141                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 142          
 143                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 144                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 145                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 146                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 147                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 148                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 149                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 150                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 151                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 152                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} } };
 153          
 154          // *************************************************************************************************
 155          // VARIABLES LOCALES
 156          // *************************************************************************************************
 157          
 158          
 159          // *************************************************************************************************
 160          void main(void)
 161          //
 162          //  Auteur: John-William Lebel
 163          //
 164          //  Description: Appelé lorsque le programme démarre
 165          //  Paramètres d'entrées  : Aucun
 166          //  Paramètres de sortie  : Aucun
 167          //  Notes                 : Aucune
 168          //
 169          // *************************************************************************************************
 170          {
 171   1          unsigned char keyboardCharacter;  // just a little buffer for the keyboard
 172   1          vInitPortSerie();     // init the serial port to utilize the RxTx232 comunication with the pic16F88
 173   1          vInitLCD();           // init the lcd
 174   1          //writeSequencesToMemoryI2C();  // that function might be misimplemented... gotta look into how to write 
             -350 values to the I2C memory in an optimized fashion
 175   1          initTimer50ms();      // init the timer0
 176   1          vAfficheLCDComplet(lcdInitializationContent);         // initialize the content of the lcd
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   11/29/2019 21:50:55 PAGE 4   

 177   1          
 178   1          while(1)
 179   1          {
 180   2              if(isOperating)   // the movements of the robot arm are automatic
 181   2              {
 182   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - BASE);
 183   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - SHOULDER);
 184   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - ELBOW);
 185   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - WRIST);
 186   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - GRIP);
 187   3              }
 188   2              else              // the movements of the robot arm are manual; we need to read the keyboard
 189   2              {
 190   3                  //keyboardCharacter = readKeyboardI2C();    // read the keyboard and put the character in a variable
 191   3                  if(keyboardCharacter != ' ')              // if we read a character
 192   3                  {
 193   4                      //handleKey(keyboardCharacter);         // handle the character and update the global variables accord
             -ignly
 194   4                  }
 195   3              }
 196   2              
 197   2              //if(isBufferFull)                              // if the circular buffer has sent a whole sequence of 8 valid bytes
 198   2              {
 199   3                                                            // update the global variables accordingly
 200   3              }
 201   2              
 202   2              // ... gotta finish what happens next!
 203   2          }
 204   1      }
 205          
 206          void printLcdDeltaCharacters()
 207          {
 208   1          printLcdDeltaMotors(&currentArmState);
 209   1          printLcdDeltaSensors(&sensors);
 210   1          printLcdDeltaWeightType(&weightType);
 211   1          printLcdDeltaManualSettings(&keyboardManualSettings);
 212   1          printLcdCurrentSequenceStep(&currentSequenceIndexes);
 213   1          printLcdDeltaConnectionState(connectionStateString);
 214   1      }
 215          
 216          //void writeSequencesToMemoryI2C()
 217          //{
 218            //writeMemoryI2C(sequences);
 219          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     82    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    350    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =    103       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
