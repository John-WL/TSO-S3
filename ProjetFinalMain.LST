C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 17:30:49 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PROJETFINALMAIN
OBJECT MODULE PLACED IN ProjetFinalMain.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ProjetFinalMain.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS
                    -(2)

line level    source

   1          /**************************************************************************************************
   2          Nom du fichier: ProjetFinalMain.c
   3          Auteur: John-William Lebel
   4          Date de création: 2019-11-26
   5          
   6          Versions:
   7          0.1 -> Code base
   8          
   9          ***************************************************************************************************/
  10          
  11          // *************************************************************************************************
  12          //  INCLUDES
  13          // *************************************************************************************************  
  14          
  15          #include "ds89c450.h"       // Définition des bits et des registres du microcontrôleur
  16          #include <stdio.h>          // Prototype de declarations des fonctions I/O  
  17          #include "I2C.h"            // I2C functions handling
  18          #include "RxTx232.h"        // RxTx232 functions handling
  19          #include "LCD.h"            // LCD functions handling
  20          #include "Timer0.h"         // Timer0 initialization handling
  21          #include "TypeConversion.h" // Fonctions useful when it comes to converting values between type representa
             -tions and/or types
  22          //#include "MemoryI2C.h"
  23          #include "ProjectDefinitions.h"
  24          #include "SubOptimizedLcdPrinter.h"
  25          #include "CircularBuffer_RxTx.h"
  26          
  27          // *************************************************************************************************
  28          //  CONSTANTES
  29          // *************************************************************************************************
  30          
  31          // in "ProjectDefinitions.h"
  32          
  33          // *************************************************************************************************
  34          //  FONCTIONS LOCALES
  35          // *************************************************************************************************
  36          
  37          void printLcdDeltaCharacters(void);
  38          //void writeSequencesToMemoryI2C(void);     // only needed once when we'll fill up the memory
  39          
  40          // *************************************************************************************************
  41          //  STRUCTURES ET UNIONS
  42          // *************************************************************************************************
  43          
  44          // in "ProjectDefinitions.h"
  45          
  46          // *************************************************************************************************
  47          // VARIABLES GLOBALES
  48          // *************************************************************************************************
  49          
  50          struct ArmState currentArmState = { MIDDLE_POSITION,      // base starting position
  51                                              MIDDLE_POSITION,      // shoulder starting position
  52                                              MIDDLE_POSITION,      // elbow starting position
  53                                              MIDDLE_POSITION,      // wrist starting position
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 17:30:49 PAGE 2   

  54                                              MAXIMUM_POSITION };   // grip starting position (open)
  55          
  56          struct Compteur stCompteur = {0, 0, 0};
  57          
  58          struct TramePIC trame = {{{0xFF, 0xFF}, 0xFF, 0xFF}, 0xFF};   // default readings
  59          unsigned char weightType = NONE_WEIGHT;                   // default to "no weight"
  60          struct KeyboardManualSettings keyboardManualSettings = {MOTOR_0, 5};  // defaultselected motor = base
  61                                                                                // and default manual speed is
  62                                                                                // set to an arbitrary value.
  63          struct SequenceStep currentSequenceIndexes = {0, 0};        // this is to store the current sequence
  64                                                                      // the arm is executing with two indexes:
  65                                                                      // "sequence" and "step". It probably needs
  66                                                                      // a better name... plz be charitable to the community much luv thx.
  67          
  68          unsigned char connectionStateString[4] = LCD_DELTA_OFFLINE_VALUE;
  69                                                                      // OffL/OnL. It's a variable storing the changes to print to the
  70                                                                      // lcd in case we lose contact with the exterior... 
  71          
  72          unsigned char isOperating = 0;                              // variable that tells if we're in manual or automatic funtio
             -nning
  73                                                                      // of the robotic arm.
  74          
  75          
  76          unsigned char lcdInitializationContent[4][21] = { {"1:66 2:66 3:66 4:66 "},
  77                                                            {"5:66 X:FF Y:FF P:FF "},
  78                                                            {"B:FF POID:--        "},
  79                                                            {"05 seq:0 step:0 OffL"} };
  80          
  81                // that stupid and massive array might be useful to fill up the I2C memory... just a thought
  82          unsigned char xdata sequences[7][10][5] = { { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  83                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  84                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  85                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  86                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  87                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  88                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  89                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  90                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  91                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
  92          
  93                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  94                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  95                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  96                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  97                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  98                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  99                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 100                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 101                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 102                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 103          
 104                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 105                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 106                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 107                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 108                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 109                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 110                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 111                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 112                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 113                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 114          
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 17:30:49 PAGE 3   

 115                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 116                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 117                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 118                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 119                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 120                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 121                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 122                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 123                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 124                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 125          
 126                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 127                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 128                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 129                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 130                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 131                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 132                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 133                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 134                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 135                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 136          
 137                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 138                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 139                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 140                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 141                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 142                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 143                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 144                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 145                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 146                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} },
 147          
 148                                                      { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 149                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 150                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 151                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 152                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 153                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 154                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 155                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 156                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 157                                                        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF} } };
 158          
 159          // *************************************************************************************************
 160          // VARIABLES LOCALES
 161          // *************************************************************************************************
 162          
 163          
 164          // *************************************************************************************************
 165          void main(void)
 166          //
 167          //  Auteur: John-William Lebel
 168          //
 169          //  Description: Appelé lorsque le programme démarre
 170          //  Paramètres d'entrées  : Aucun
 171          //  Paramètres de sortie  : Aucun
 172          //  Notes                 : Aucune
 173          //
 174          // *************************************************************************************************
 175          {
 176   1          unsigned char keyboardCharacter;  // just a little buffer for the keyboard
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 17:30:49 PAGE 4   

 177   1          vInitPortSerie();     // init the serial port to utilize the RxTx232 comunication with the pic16F88
 178   1          vInitLCD();           // init the lcd
 179   1          //writeSequencesToMemoryI2C();  // that function might be misimplemented... gotta look into how to write 
             -350 values to the I2C memory in an optimized fashion
 180   1          initTimer50ms();      // init the timer0
 181   1          vAfficheLCDComplet(lcdInitializationContent);         // initialize the content of the lcd
 182   1          vInitInterrupt();     // init interrupt on serial 0
 183   1          
 184   1          while(1)
 185   1          {   
 186   2            if(TF0 == 1)
 187   2            {
 188   3              vUpdateCompteurTimer0(&stCompteur);
 189   3            }   
 190   2            
 191   2            if(stCompteur.ucCompteur300ms > 5)
 192   2            {
 193   3              stCompteur.ucCompteur300ms = 0;
 194   3              vHandleTrame(&trame, &currentArmState);
 195   3              
 196   3            }  
 197   2            
 198   2            if(stCompteur.ucCompteur200ms > 3)
 199   2            {
 200   3              stCompteur.ucCompteur200ms = 0;
 201   3            }  
 202   2            
 203   2            if(stCompteur.ucCompteur2sec > 39)
 204   2            {
 205   3              stCompteur.ucCompteur2sec = 0;
 206   3            }     
 207   2            
 208   2            if(isOperating)   // the movements of the robot arm are automatic
 209   2            {
 210   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - BASE);
 211   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - SHOULDER);
 212   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - ELBOW);
 213   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - WRIST);
 214   3                  //currentArmState.base = readMemoryI2C(currentSequenceIndexes.sequence, currentSequenceIndexes.step,
             - GRIP);
 215   3              }
 216   2              else              // the movements of the robot arm are manual; we need to read the keyboard
 217   2              {
 218   3                  //keyboardCharacter = readKeyboardI2C();    // read the keyboard and put the character in a variable
 219   3                  if(keyboardCharacter != ' ')              // if we read a character
 220   3                  {
 221   4                      //handleKey(keyboardCharacter);         // handle the character and update the global variables accord
             -ignly
 222   4                  }
 223   3              }
 224   2              
 225   2              //if(isBufferFull)                              // if the circular buffer has sent a whole sequence of 8 valid bytes
 226   2              {
 227   3                                                            // update the global variables accordingly
 228   3              }
 229   2              
 230   2              // ... gotta finish what happens next!
 231   2          }
C51 COMPILER V9.53.0.0   PROJETFINALMAIN                                                   12/02/2019 17:30:49 PAGE 5   

 232   1      }
 233          
 234          void printLcdDeltaCharacters()
 235          {
 236   1          printLcdDeltaMotors(&currentArmState);
 237   1          printLcdDeltaTrame(&trame);
 238   1          printLcdDeltaWeightType(&weightType);
 239   1          printLcdDeltaManualSettings(&keyboardManualSettings);
 240   1          printLcdCurrentSequenceStep(&currentSequenceIndexes);
 241   1          printLcdDeltaConnectionState(connectionStateString);
 242   1      }
 243          
 244          //void writeSequencesToMemoryI2C()
 245          //{
 246            //writeMemoryI2C(sequences);
 247          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    156    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    457       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
