C51 COMPILER V9.53.0.0   SEQUENCEHANDLER                                                   12/05/2019 16:48:54 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SEQUENCEHANDLER
OBJECT MODULE PLACED IN SequenceHandler.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SequenceHandler.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS
                    -(2)

line level    source

   1          /**************************************************************************************************
   2              Nom du fichier : SequenceHandler.c
   3              
   4              Auteur : John-William Lebel
   5              Date de création : 2019-12-05
   6              gérance de la séquence en fonction de la séquence envoyée par le PIC
   7              
   8          ***************************************************************************************************/
   9          #include "SequenceHandler.h"
  10          #include "ProjectDefinitions.h"
  11          
  12          // variables
  13          unsigned char currentOperatingState = STAND_BY_OPERATING_STATE;
  14          
  15          // prototypes
  16          void handleTouchScreen(struct TouchScreen* toucheScreen, struct SequenceStep* currentSequenceIndexes);
  17          unsigned char getSortingSequenceFromWheightSampling(unsigned char* weightSensor);
  18          
  19          // function implementations
  20          void handleSequence(struct TramePIC* trame, struct SequenceStep* currentSequenceIndexes, unsigned char* we
             -ightType)
  21          {
  22   1          switch(currentOperatingState)
  23   1          {
  24   2            case STAND_BY_OPERATING_STATE:
  25   2                handleTouchScreen(&(trame->adcSensors.touchScreen), currentSequenceIndexes);
  26   2                break;
  27   2            case WEIGHT_GRABING_OPERATING_STATE:
  28   2                currentSequenceIndexes->step++;
  29   2                if(currentSequenceIndexes->step == 4)
  30   2                {
  31   3                    currentSequenceIndexes->sequence = 3;
  32   3                    currentSequenceIndexes->step = 0;
  33   3                    currentOperatingState = WEIGHT_POSITIONING_OPERATING_STATE;
  34   3                }
  35   2                break;
  36   2            case WEIGHT_POSITIONING_OPERATING_STATE:
  37   2                currentSequenceIndexes->step++;
  38   2                if(currentSequenceIndexes->step == 2)
  39   2                {
  40   3                    currentOperatingState = WEIGHT_SAMPLING_OPERATING_STATE;
  41   3                }
  42   2                break;
  43   2            case WEIGHT_SAMPLING_OPERATING_STATE:
  44   2                currentSequenceIndexes->sequence = getSortingSequenceFromWheightSampling(&(trame->adcSensors.wei
             -ghtSensor));
  45   2                *weightType = currentSequenceIndexes->sequence - 4;
  46   2                currentSequenceIndexes->step = 0;
  47   2                currentOperatingState = WEIGHT_SORTING_OPERATING_STATE;
  48   2                break;
  49   2            case WEIGHT_SORTING_OPERATING_STATE:
  50   2                currentSequenceIndexes->step++;
  51   2                if(currentSequenceIndexes->step == 6)
  52   2                {
C51 COMPILER V9.53.0.0   SEQUENCEHANDLER                                                   12/05/2019 16:48:54 PAGE 2   

  53   3                    currentOperatingState = STAND_BY_OPERATING_STATE;
  54   3                    *weightType = 4;
  55   3                }
  56   2                break;
  57   2          }
  58   1      }
  59          
  60          void handleTouchScreen(struct TouchScreen* touchScreen, struct SequenceStep* currentSequenceIndexes)
  61          {
  62   1          //A6::
  63   1            //x:0x00 à 0x60
  64   1            //y:0x00 à 0x70
  65   1          //B2::
  66   1            //x:0x60 à 0xA0
  67   1            //y:0xC0 à 0xFF
  68   1          //C5::
  69   1            //x:0xA0 à 0xFF
  70   1            //y:0x70 à 0xC0
  71   1      
  72   1          // A6 appuyé?
  73   1          if(touchScreen->x >= 0x00 && touchScreen->x <= 0x60
  74   1              && touchScreen->y >= 0x00 && touchScreen->x <= 0x70)
  75   1          {
  76   2              currentSequenceIndexes->sequence = 0;
  77   2              currentSequenceIndexes->step = 0;
  78   2              currentOperatingState = WEIGHT_GRABING_OPERATING_STATE;
  79   2          }
  80   1          // B2 appuyé?
  81   1          else if(touchScreen->x >= 0x60 && touchScreen->x <= 0xA0
  82   1              && touchScreen->y >= 0xC0 && touchScreen->x <= 0xFF)
  83   1          {
  84   2              currentSequenceIndexes->sequence = 1;
  85   2              currentSequenceIndexes->step = 0;
  86   2              currentOperatingState = WEIGHT_GRABING_OPERATING_STATE;
  87   2          }
  88   1          // C5 appuyé?
  89   1          else if(touchScreen->x >= 0xA0 && touchScreen->x <= 0xFF
  90   1              && touchScreen->y >= 0x70 && touchScreen->x <= 0xC0)
  91   1          {
  92   2              currentSequenceIndexes->sequence = 2;
  93   2              currentSequenceIndexes->step = 0;
  94   2              currentOperatingState = WEIGHT_GRABING_OPERATING_STATE;
  95   2          }
  96   1      }
  97          
  98          unsigned char getSortingSequenceFromWheightSampling(unsigned char* weightSensor)
  99          {
 100   1          unsigned char sequenceIndex;
 101   1        
 102   1          if(*weightSensor < 0x40)
 103   1          {
 104   2              sequenceIndex = 4;
 105   2          }
 106   1          else if(*weightSensor < 0x70)
 107   1          {
 108   2              sequenceIndex = 5;
 109   2          }
 110   1          else
 111   1          {
 112   2              sequenceIndex = 6;
 113   2          }
 114   1          
C51 COMPILER V9.53.0.0   SEQUENCEHANDLER                                                   12/05/2019 16:48:54 PAGE 3   

 115   1          return sequenceIndex;
 116   1      }
 117          
 118          unsigned char isOperating(void)
 119          {
 120   1          return currentOperatingState;
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    579    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
